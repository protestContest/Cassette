; Reduce, map, filter
def (reduce list acc fn) do
  if list = nil do
    acc
  else
    (reduce (tail list)
            (fn (head list) acc)
            fn)
  end
end

def (map list fn) do
  reduce list nil (item new-list) -> do
    (fn item) | new-list
  end
  |> reverse
end

def (each list fn) do
  reduce list nil (item _) -> do
    (fn item)
    nil
  end
end

def (filter list fn) do
  reduce list nil (item new-list) -> do
    if (fn item) (item | new-list) new-list
  end
  |> (reverse)
end

1..100
|> each (n) -> do
  cond do
    (rem n 3) = 0 and (rem n 5) = 0 -> display "fizzbuzz"
    ((rem n 3) = 0) -> display "fizz"
    ((rem n 5) = 0) -> display "buzz"
  else
    display n
  end
end
