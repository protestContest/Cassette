; Reduce, map, filter
def (reduce list acc fn) do
  if acc = nil do
    acc
  else
    reduce (tail list) (fn (head list) acc) fn
  end
end

def (map list fn) do
  reduce list nil (item new-list) -> do
    (fn item) | new-list
  end
  |> reverse
end

def (filter list fn) do
  reduce list nil (item new-list) -> do
    if (fn item) (item | new-list) new-list
  end
  |> reverse
end

1..100
|> map (n) -> do
  cond do
    ((rem n 3) = 0 and (rem n 5) = 0), display "fizzbuzz"
    rem n 3 = 0, display "fizz"
    rem n 5 = 0, display "buzz"
    true, display n
  end
end
