#pragma once

/*
Grammar:
  1 program         → block $
  2 block           → block stmt
  3 block           → ε
  4 stmt            → expr NL
  5 stmt            → expr $
  6 expr            → expr sum
  7 expr            → ε
  8 sum             → sum "+" product
  9 sum             → sum "-" product
 10 sum             → product
 11 product         → product "*" primary
 12 product         → product "/" primary
 13 product         → primary
 14 primary         → NUM
 15 primary         → ID
 16 primary         → group
 17 primary         → lambda
 18 group           → "(" expr ")"
 19 lambda          → group "->" primary
*/

char *symbol_names[] = {
  [0] = "$",
  [1] = "NL",
  [2] = "+",
  [3] = "-",
  [4] = "*",
  [5] = "/",
  [6] = "NUM",
  [7] = "ID",
  [8] = "(",
  [9] = ")",
  [10] = "->",
  [11] = "program",
  [12] = "block",
  [13] = "stmt",
  [14] = "expr",
  [15] = "sum",
  [16] = "product",
  [17] = "primary",
  [18] = "group",
  [19] = "lambda",
};
#define TOP_SYMBOL 11

// indexed by state
static unused i32 reduction_syms[] = {
  12,  14,  12,  11,  -1,  14,  13,  13,  15,  16,  17,  17,  17,  17,
  14,  -1,  -1,  -1,  -1,  -1,  -1,  15,  15,  16,  16,  19,  18,
};

// indexed by state
static unused u32 reduction_sizes[] = {
   0,   0,   2,   2,   0,   2,   2,   2,   1,   1,   1,   1,   1,   1,
   0,   0,   0,   0,   0,   0,   0,   3,   3,   3,   3,   3,   3,
};

// indexed by state, symbol
#define NUM_STATES 27
#define NUM_SYMS 20
static unused i32 actions[][NUM_SYMS] = {
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   4,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {   6,   7,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,   5,   8,   9,  12,  13,},
  {  -1,  -1,  16,  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  18,  17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,   9,  12,  13,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  22,   9,  12,  13,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23,  12,  13,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  24,  12,  13,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  25,  12,  13,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  10,  11,  14,  26,  -1,  -1,  -1,  -1,  -1,   5,   8,   9,  12,  13,},
  {  -1,  -1,  -1,  -1,  18,  17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  18,  17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
  {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
};
