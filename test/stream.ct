module Stream
import List
import IO

def (repeat item) \-> item | (repeat item)

def (range min max)
  if min > max do
    nil
  else
    \-> min | (range min + 1 max)
  end

def (cycle list) do
  def (next rest)
    if rest == nil do
      (cycle list)
    else
      \-> (head rest) | (next (tail rest))
    end

  next list
end

def (reduce acc fn stream) do
  if stream == nil do
    acc
  else
    \-> do
      let next = (stream),
          acc = (fn (head next) acc)
      (reduce acc fn (tail next))
    end
  end
end

def (run stream)
  if stream == nil do
    nil
  else
    let next = (stream)
    run (tail next)
  end

def (concat s1 s2)
  if s1 == nil do
    s2
  else
    \-> do
      let next = (s1)
      (head next) | (concat (tail next) s2)
    end
  end

def (interleave s1 s2)
  if s1 == nil do
    s2
  else
    \-> do
      let next = (s1)
      (head next) | (interleave s2 (tail next))
    end
  end

def (map fn stream) do
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      (fn (head next)) | (map fn (tail next))
    end
  end
end

def (filter fn stream)
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      if (fn (head next)) do
        (head next) | (filter fn (tail next))
      else
        ((filter fn (tail next)))
      end
    end
  end

def (reject fn stream)
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      if not (fn (head next)) do
        (head next) | (reject fn (tail next))
      else
        ((reject fn (tail next)))
      end
    end
  end

def (flatten stream) do
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream), next_stream = (head next)
      (head next_stream) | (interleave (tail next_stream) (flatten (tail next)))
    end
  end
end

def (flatmap fn stream) (flatten (map fn stream))

def (chunk n stream) do
  def (loop n acc stream) do
    if n == 0 or stream == nil do
      (List.reverse acc) | stream
    else
      let next = (stream)
      loop n - 1 ((head next) | acc) (tail stream)
    end
  end

  \-> (loop n nil stream)
end

def (chunk-while pred stream) do
  def (loop acc stream) do
    if stream == nil do
      nil
    else
      let next = (stream)
      if not (pred (head next)) do
        (List.reverse acc) | \-> next
      else
        loop (head next) | acc (tail next)
      end
    end
  end

  \-> (loop nil stream)
end

def (take n stream) do
  if n == 0 or stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      (head next) | (take n - 1 (tail next))
    end
  end
end

def (take-while fn stream) do
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      if (fn (head next)) do
        (head next) | (take-while fn (tail next))
      else
        nil
      end
    end
  end
end

def (drop n stream) do
  if n == 0 or stream == nil do
    stream
  else
    \-> do
      let next = (stream)
      ((drop n - 1 (tail next)))
    end
  end
end

def (with-index-from n stream) do
  if stream == nil do
    nil
  else
    \-> do
      let next = (stream)
      ((head next) | n) | (with-index-from n + 1 (tail next))
    end
  end
end

def (with-index stream) (with-index-from 0 stream)

def (zip heads tails) do
  if heads == nil or tails == nil do
    nil
  else
    \-> do
      let next_head = (heads), next_tail = (tails)
      ((head next_head) | (head next_tail)) | (zip (tail heads) (tail tails))
    end
  end
end
