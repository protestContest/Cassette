module Value
import List
export typeof, nil?, integer?, pair?, tuple?, binary?, byte, symbol_name, error?, format, inspect

def typeof(value) trap typeof(value)
def byte(value) trap byte(value)
def symbol_name(sym) trap symbol_name(sym)

def nil?(v) v == nil
def integer?(v) typeof(v) == :integer
def symbol?(v) typeof(v) == :symbol
def pair?(v) typeof(v) == :pair
def tuple?(v) typeof(v) == :tuple
def binary?(v) typeof(v) == :binary

def error?(result)
  if
    result == :error, true
    tuple?(result) and #result > 0 and result[0] == :error, true
    else false

def format(data)
  if
    binary?(data), data
    integer?(data) and data >= 0 and data <= 255, byte(data)
    pair?(data) and data != nil, format(@data) <> format(^data)
    else ""

def inspect_int(num) do
  def loop(num, parts)
    if
      num == 0, parts
      else
        let digit = num % 10 + $0
        in loop(num / 10, digit : parts)

  if
    num == 0, "0"
    num < 0, "-" : loop(-num, [])
    else loop(num, [])
end

def inspect_tuple(value, depth) do
  def loop(i, parts) when i == #value, List.reverse(parts)
  def loop(i, parts)
    let part = inspect_depth(value[i], depth-1)
    in loop(i+1, part : parts)

  let parts = loop(0, [])
  in ["{", List.intersperse(parts, ", "), "}"]
end

def inspect_list(list, depth) do
  def loop(list, parts)
    if
      list == nil,
        List.reverse(parts)
      not pair?(^list),
        List.reverse([
          inspect_depth(@list, depth - 1),
          " : ",
          inspect_depth(^list, depth - 1)
        ] : parts)
      else
        loop(^list, inspect_depth(@list, depth - 1) : parts)

  ["[", List.intersperse(loop(list, []), ", "), "]"]
end

def inspect_depth(value, depth)
  if
    depth == 0,       "..."
    value == nil,     "nil"
    binary?(value),   ["\"", value, "\""]
    integer?(value),  inspect_int(value)
    symbol?(value),   ":" <> symbol_name(value)
    tuple?(value),    inspect_tuple(value, depth)
    pair?(value) and  typeof(^value) != :pair,
      [inspect_depth(@value, depth - 1), " : ", inspect_depth(^value, depth - 1)]
    pair?(value),     inspect_list(value, depth)
    else              ""

def inspect(value) inspect_depth(value, 10)
