import Window, IO, Math, List, Value

---
Quit when key press is cmd+Q or escape
---
def should_quit(event)
  event.what == :keyDown and
  ((event.message & 0xFF == $q and Window.modifier?(event, :cmd)) or
   (event.message >> 8 == 0x35))

---
Keep checking for events and draw the next image on key press
---
def loop(window, mod)
  let event = Window.next_event() except should_quit(event), nil
  in
    if event.what == :keyDown, do
      draw_image(window, mod+1)
      loop(window, mod+1)
    end
    else
      loop(window, mod)

---
Generate a new image and update the window
---
def draw_image(window, mod)
  let
    white = Value.format([0xFF, 0xFF, 0xFF, 0])
    black = Value.format([0, 0, 0, 0])
    pixels =
      map_range(0, window.height, \y ->
        map_range(0, window.width, \x ->
          if (x ^ y) % mod, white else black))
    img = Value.format(pixels)
  in do
    IO.inspect(mod)
    Window.blit(img, window.width, window.height, 0, 0, window)
    Window.update(window)
  end

---
Map a range of integers with a function
---
def map_range(min, max, fn) do
  def loop(i, acc) when i >= max, List.reverse(acc)
  def loop(i, acc) do
    loop(i+1, fn(i) : acc)
  end
  loop(min, [])
end

let
  width = 512
  height = 384
  window = Window.open("Test", width, height)
in do
  draw_image(window, 3)
  loop(window, 3)
end
