import Window, Value, List, IO

record Point(x, y)

def make_hash() do
  let h = {151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180}
  in \x, y -> h[h[x & 0xFF]+y & 0xFF]
end

def grad(x, y, h)
  let h = h &0xF
  in if
    h == 0x0,  x + y
    h == 0x1, -x + y
    h == 0x2,  x - y
    h == 0x3, -x - y
    h == 0x4,  x + 0
    h == 0x5, -x + 0
    h == 0x6,  x - 0
    h == 0x7, -x - 0
    h == 0x8,  y + 0
    h == 0x9, -y + 0
    h == 0xA,  y - 0
    h == 0xB, -y - 0
    h == 0xC,  y + x
    h == 0xD, -y + 0
    h == 0xE,  y - x
    h == 0xF, -y - 0
  else 0


; 6t^5 - 15t^4 + 10t^3
; t^3 * (6t^2 - 15t + 10)

def fade(t, n) t
  ; let
  ;   a = 3 * t * t / n
  ;   b = 2 * t * t * t / n / n
  ; in do
  ;   IO.inspect({t, a, b, a - b})
  ;   a - b
  ; end
  ; 3*t*t/n - 2*t*t*t/n/n

  ; let
  ;   a = 6 * t * t / n
  ;   b = -15 * t
  ;   c = 10 * n
  ; in do
  ;   IO.inspect([t, a, b, c])
  ;   IO.inspect(t * t * t * (a + b + c) / 100 / 100 / 100)
  ; end

def map(t, a0, a1, b0, b1)
  (t - a0) * (b1 - b0) / (a1 - a0) + b0

def clamp(n, low, high) when n < low, low
def clamp(n, low, high) when n > high, high
def clamp(n, low, high) n

def make_perlin(grid_size)
  let hash = make_hash()
  in \x, y ->
    let
      hash = make_hash()
      x0 = x / grid_size
      y0 = y / grid_size
      x1 = x0 + 1
      y1 = y0 + 1
      x = x - x0*grid_size
      y = y - y0*grid_size
      u = fade(x, grid_size)
      v = fade(y, grid_size)
      x1 = map(u, 0, grid_size, grad(x,           y,            hash(x0, y0)),
                                grad(x-grid_size, y,            hash(x1, y0)))
      x2 = map(u, 0, grid_size, grad(x,           y-grid_size,  hash(x0, y1)),
                                grad(x-grid_size, y-grid_size,  hash(x1, y1)))
      value = map(v, 0, grid_size, x1, x2)
    in clamp(value, -grid_size, grid_size)

def draw_image(window, grid_size)
  let
    perlin = make_perlin(grid_size)
    pixels =
      map_range(0, window.height/2, \y ->
        let row = map_range(0, window.width/2, \x ->
          let
            color = map(perlin(x, y), -grid_size, grid_size, 0, 255)
            pixel = [color, color, color, 0]
          in [pixel, pixel])
        in [row, row])
    img = Value.format(pixels)
  in do
    Window.blit(img, window.width, window.height, 0, 0, window)
    Window.update(window)
  end

def loop(window)
  let event = Window.next_event()
  in
    if event.what == :keyDown, nil
    else loop(window)

def map_range(min, max, fn) do
  def loop(i, acc) when i >= max, List.reverse(acc)
  def loop(i, acc) do
    loop(i+1, fn(i) : acc)
  end
  loop(min, [])
end

let
  width = 400
  height = 400
  window = Window.open("Test", width, height)
in do
  draw_image(window, 100)
  loop(window)
end

