module Canvas
export new, clear, present, line, bezier

def new(width, height) do
  let canvas = sdl_new_window(width, height)
  clear(canvas)
  canvas
end

def clear(canvas) do
  sdl_set_color(255, 255, 255, canvas)
  sdl_clear(canvas)
  sdl_set_color(0, 0, 0, canvas)
end

def present(canvas) do
  def loop() do
    let event = sdl_poll_event()

    if event do
      cond
        event[0] == :keydown and event[2] == :escape -> nil
        event[0] == :quit -> nil
        true -> loop()
      end
    else
      loop()
    end
  end
  sdl_present(canvas)
  loop()
  sdl_destroy_window(canvas)
end

def line(x1, y1, x2, y2, canvas) sdl_line(x1, y1, x2, y2, canvas)

def midpoint(p1, p2) do
  {(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2}
end

def bezier(x1, y1, x2, y2, x3, y3, canvas) do
  def loop(a, b, c, n) do
    if n == 0 do
      line(a[0], a[1], c[0], c[1], canvas)
    else
      let m12 = midpoint(a, b),
          m23 = midpoint(b, c),
          m = midpoint(m12, m23)
      loop(a, m12, m, n - 1)
      loop(m, m23, c, n - 1)
    end
  end

  loop({x1, y1}, {x2, y2}, {x3, y3}, 5)
end
