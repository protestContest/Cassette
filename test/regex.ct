; record State(type, value, quantity)

; def compile(pattern) do
;   def push_state(s, states) (s : @states) : ^states
;   def last_state(states) @@states
;   def replace_state(s, states)
;     (s : ^@states) : ^states

;   def quantify(s, q) when s.quantity == q, s
;   def quantify(s, q) State(s.type, s.value, q)

;   def loop(i, states) when i == #pattern,
;     List.reverse(@states)
;   def loop(i, states) when pattern[i] == $\ and i < #pattern-1,
;     loop(i+2, push_state(State(:literal, pattern[i+1], :one), states))
;   def loop(i, states)
;     loop(i+1, next(pattern[i], states))

;   def next(c, states) when c == $(,
;     [] : states
;   def next(c, states) when c == $),
;     push_state(State(:group, List.reverse(@states), :one), ^states)
;   def next(c, states) when c == $.,
;     push_state(State(:dot, nil, :one), states)
;   def next(c, states) when c == $?,
;     replace_state(quantify(last_state(states), :optional), states)
;   def next(c, states) when c == $*,
;     replace_state(quantify(last_state(states), :zero_plus), states)
;   def next(c, states) when c == $+,
;     replace_state(quantify(last_state(states), :one_plus), states)
;   def next(c, states)
;     push_state(State(:literal, c, :one), states)

;   loop(0, [[]])
; end

; IO.inspect(compile("(ab*a"))
