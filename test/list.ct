module List
export reduce, map, reverse

def reduce(list, acc, fn) do
  if list do
    reduce(list[1:], fn(list[0], acc), fn)
  else
    acc
  end
end

def reverse_onto(list, tail) do
  if list do
    reverse_onto(list[1:], list[0] | tail)
  else
    tail
  end
end

def reverse(list) reverse_onto(list, nil)

def map(list, fn) do
  reverse(reduce(list, nil, \item, acc -> fn(item) | acc))
end
