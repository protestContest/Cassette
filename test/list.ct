module List
export reverse, reduce, map, filter, range, zip, with_index, contains?, intersperse, head, tail

def head(list) list[0]
def tail(list) list[1,#list]

def reduce(list, acc, fn) do
  if list do
    reduce(tail(list), fn(head(list), acc), fn)
  else
    acc
  end
end

def reverse(list) do
  reduce(list, nil, \item, acc -> item : acc)
end

def map(list, fn) do
  reverse(reduce(list, nil, \item, acc -> fn(item) : acc))
end

def filter(list, fn) do
  reverse(
    reduce(list, nil, \item, acc ->
      if fn(item) do
        item : acc
      else
        acc
      end))
end

def range(min, max) do
  def build_range(n, list) do
    if n > min do
      build_range(n-1, n-1 : list)
    else
      list
    end
  end

  if max < min do
    reverse(range(max, min))
  else
    build_range(max, nil)
  end
end

def zip(a, b) do
  def build_zip(a, b, zipped) do
    if a and b do
      build_zip(tail(a), tail(b), {head(a), head(b)} : zipped)
    else
      reverse(zipped)
    end
  end

  build_zip(a, b, nil)
end

def with_index(list) do
  zip(range(0, #list), list)
end

def contains?(list, item) cond
  list == nil -> false
  head(list) == item -> true
  true -> contains?(tail(list), item)
end

def intersperse(list, sep) cond
  list == nil -> nil
  tail(list) == nil -> list
  true -> reverse(reduce(tail(list), [head(list)], \item, acc -> item : sep : acc))
end

def all?(list) cond
  list == nil -> true
  head(list) -> all?(tail(list))
  true -> false
end

def any?(list) cond
  list == nil -> false
  head(list) -> true
  true -> any?(tail(list))
end
