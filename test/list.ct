module List
export
  head, tail, drop, take,
  reduce, reverse, map, filter,
  range, zip, with_index, contains?,
  intersperse

def take(list, n) when (n == 0) nil
def take(list, n) reverse(@list : take(^list, n - 1))

; takes n items from a list and adds them to the front of tail, in reverse order
def take_onto(list, n, tail)
  if n == 0, tail
  else take_onto(^list, n - 1, @list : tail)

; takes n items from a list
def take(list, n) reverse(take_onto(list, n, nil))

; drops n items from the front of a list
def drop(list, n)
  if
    n == 0, list
    list == nil, list
    else drop(^list, n - 1)

; inserts an item into a list at index
def insert(list, index, item) do
  def loop(list, index, prefix)
    if not list or index == 0, reverse_onto(prefix, item : list)
    else loop(^list, index - 1, @list : prefix)
  loop(list, index, nil)
end

def head(list) @list
def tail(list) ^list

def reduce(list, acc, fn)
  if list, reduce(^list, fn(@list, acc), fn)
  else acc

; adds list to the front of tail, in reverse order
def reverse_onto(list, tail)
  reduce(list, tail, \item, acc -> item : acc)

; reverses a list
def reverse(list) reverse_onto(list, nil)

def map(list, fn)
  reverse(reduce(list, nil, \item, acc -> fn(item) : acc))

def filter(list, fn)
  let list =
    reduce(list, nil, \item, acc ->
      if fn(item), item : acc
      else acc)
  in reverse(list)

def range(min, max) do
  def build_range(n, list)
    if n > min, build_range(n-1, n-1 : list)
    else list

  if max < min, reverse(range(max, min))
  else build_range(max, nil)
end

def zip(a, b) do
  def build_zip(a, b, zipped)
    if a and b,
      build_zip(^a, ^b, {@a, @b} : zipped)
    else
      reverse(zipped)

  build_zip(a, b, nil)
end

def with_index(list)
  zip(range(0, #list), list)

def contains?(list, item)
  if
    list == nil, false
    @list == item, true
    else contains?(^list, item)

def intersperse(list, sep)
  if
    list == nil, nil
    ^list == nil, list
  else
    reverse(reduce(^list, [@list], \item, acc -> item : sep : acc))

def all?(list)
  if
    list == nil, true
    @list, all?(^list)
    else false

def any?(list)
  if
    list == nil, false
    @list, true
    else any?(^list)
