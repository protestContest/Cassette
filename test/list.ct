module List
export reverse, reduce, map, filter, range, zip, with_index, contains?, intersperse

def reduce(list, acc, fn) do
  if list do
    reduce(list[1:], fn(list[0], acc), fn)
  else
    acc
  end
end

def reverse(list) do
  reduce(list, nil, \item, acc -> item | acc)
end

def map(list, fn) do
  reverse(reduce(list, nil, \item, acc -> fn(item) | acc))
end

def filter(list, fn) do
  reverse(
    reduce(list, nil, \item, acc ->
      if fn(item) do
        item | acc
      else
        acc
      end))
end

def range(min, max) do
  def build_range(n, list) do
    if n > min do
      build_range(n-1, n-1 | list)
    else
      list
    end
  end

  if max < min do
    reverse(range(max, min))
  else
    build_range(max, nil)
  end
end

def zip(a, b) do
  def build_zip(a, b, zipped) do
    if a and b do
      build_zip(a[1:], b[1:], {a[0], b[0]} | zipped)
    else
      reverse(zipped)
    end
  end

  build_zip(a, b, nil)
end

def with_index(list) do
  zip(range(0, #list), list)
end

def contains?(list, item) cond
  list == nil -> false
  list[0] == item -> true
  true -> contains?(list[1:], item)
end

def intersperse(list, sep) cond
  list == nil -> nil
  list[1:] == nil -> list
  true -> reverse(reduce(list[1:], [list[0]], \item, acc -> item | sep | acc))
end

def all?(list) cond
  list == nil -> true
  list[0] -> all?(list[1:])
  true -> false
end

def any?(list) cond
  list == nil -> false
  list[0] -> true
  true -> any?(list[1:])
end
