module Map
export
  new, put, get, delete, member?, count, reduce, merge, keys, values, items,
  inspect, take

; a hash array mapped trie. each node has 16 "slots" and a bitmap of which slots
; are present. each node only stores the slots that are present. keys are mapped
; to slots based on 4 bits of their hash. on a collision, that slot is a sub-map
; that uses the next 4 hash bits.

record MapNode(bits, entries)

; a map node stores its slot bitmap and its entries

; if the entries are nil, it's the empty map
def empty?(map) map.entries == nil
def empty_map() MapNode(0, nil)

; if the entries are a pair, it's a leaf
def leaf?(map) typeof(map.entries) == :pair
def leaf(key, value) MapNode(0, key : value)
def leaf_key(leaf) @leaf.entries
def leaf_value(leaf) ^leaf.entries

; check if a slot is taken
def slot_taken?(map, slot) map.bits & (1 << slot)

; the entry index is the number of taken slots below our slot
def slot_index(bits, slot) Math.popcount(bits & ((1 << slot)-1))
def set_slot(bits, slot) bits | (1 << slot)
def unset_slot(bits, slot) bits & ~(1 << slot)

; take 4 bits of a hash based on the map depth
def hash_slot(hash, depth) (hash >> 4*depth) & 0xF
def key_slot(key, depth) hash_slot(hash(key), depth)

def replace_slot(map, slot, entry)
  let
    bits = map.bits
    index = slot_index(bits, slot)
    entries = map.entries
    entries = entries[0,index] <> {entry} <> entries[index+1,#entries]
  in MapNode(bits, entries)

; create a map from a list of (key : value) pairs
def new(entries) do
  def loop(entries, map) when entries == nil, map
  def loop(entries, map)
    let entry = @entries
    in loop(^entries, put(map, @entry, ^entry))

  loop(entries, empty_map())
end

; put a value in a map under a key
def put(map, key, value) when empty?(map), leaf(key, value)
def put(map, key, value) do
  def put(map, depth, hash, entry) when leaf?(map),
    if leaf_key(map) == leaf_key(entry), entry ; replace value
    else put(mapify(map, depth), depth, hash, entry) ; extend map deeper

  def put(map, depth, hash, entry)
    let
      slot = hash_slot(hash, depth)
      index = slot_index(map.bits, slot)
      entries = map.entries
    in if
      slot_taken?(map, slot),
        replace_slot(map, slot, put(entries[index], depth+1, hash, entry))
      else
        insert_slot(map, slot, entry)

  ; wraps a leaf node in a mid-level node. we have to know the depth to
  ; correctly recalculate the slot from the hash
  def mapify(leaf, depth)
    let slot = key_slot(leaf_key(leaf), depth)
    in MapNode(set_slot(0, slot), {leaf})

  def insert_slot(map, slot, entry)
    let
      bits = set_slot(map.bits, slot)
      index = slot_index(bits, slot)
      entries = map.entries
      entries = entries[0,index] <> {entry} <> entries[index,#entries]
    in MapNode(bits, entries)

  put(map, 0, hash(key), leaf(key, value))
end

; get a value from a map
def get(map, key, default) when empty?(map), default
def get(map, key, default) do
  def get(map, hash, key) when leaf?(map),
    if leaf_key(map) == key, leaf_value(map)
    else default

  def get(map, hash, key)
    let
      slot = hash_slot(hash, 0) except not slot_taken?(map, slot), default
      index = slot_index(map.bits, slot)
      entries = map.entries
    in get(entries[index], hash >> 4, key)

  get(map, hash(key), key)
end

def get!(map, key) when member?(map, key), get(map, key, nil)
def get!(map, key) trap panic!("Missing map key")

def delete(map, key) when empty?(map), map
def delete(map, key) do
  def delete(map, depth, key) when leaf?(map),
    if leaf_key(map) == key, empty_map()
    else map

  def delete(map, depth, key)
    let
      slot = key_slot(key, depth) except not slot_taken?(map, slot), map
      index = slot_index(map.bits, slot)
      entries = map.entries
      entry = delete(entries[index], depth+1, key)
    in if
      empty?(entry), remove_slot(map, slot)
      else replace_slot(map, slot, entry)

  def remove_slot(map, slot)
    let
      index = slot_index(map.bits, slot)
      bits = unset_slot(map.bits, slot)
      entries = map.entries
      entries = entries[0,index] <> entries[index+1,#entries]
    in
      if #entries == 1 and leaf?(entries[0]), entries[0]
      else MapNode(bits, entries)

  delete(map, 0, key)
end

; returns whether a key exists in a map
def member?(map, key) do
  def member?(map, hash, key) when empty?(map), false
  def member?(map, hash, key) when leaf?(map), leaf_key(map) == key
  def member?(map, hash, key)
    let
      slot = hash_slot(hash, 0) except not slot_taken?(map, slot), false
      index = slot_index(map.bits, slot)
      entries = map.entries
    in member?(entries[index], hash >> 4, key)

  member?(map, hash(key), key)
end

; reduces a function over each (key : value) pair
def reduce(map, result, fn) do
  def loop(map, result) when empty?(map), result
  def loop(map, result) when leaf?(map), fn(leaf_key(map) : leaf_value(map), result)

  ; loop over each entry in the node
  def loop(map, result) do
    def entry_loop(entries, i, result) when i == #entries, result
    def entry_loop(entries, i, result) do
      entry_loop(entries, i+1, loop(entries[i], result))
    end

    entry_loop(map.entries, 0, result)
  end

  loop(map, result)
end

; returns the number of entries in a map
def count(map) when empty?(map), 0
def count(map) reduce(map, 0, \entry, count -> count + 1)

def keys(map) reduce(map, [], \entry, keys -> @entry : keys)
def values(map) reduce(map, [], \entry, values -> ^entry : values)
def items(map) reduce(map, [], \entry, items -> entry : items)

; returns a map with all entries from m1 and m2, preferring m2
def merge(m1, m2) when empty?(m1), m2
def merge(m1, m2)
  reduce(m2, m1, \entry, map -> do
    put(map, @entry, ^entry)
  end)

; renders a map to a string
def inspect(map) do
  def inspect_key(key) when symbol?(key), symbol_name(key)
  def inspect_key(key) inspect(key)

  let items = List.map(items(map), \item ->
      [inspect_key(@item), ": ", Value.inspect(^item)])
  in ["{", List.intersperse(items, ", "), "}"]
end

; returns a map subset with only the given keys, if present
def take(map, keys) do
  def loop(keys, taken) when keys == nil, taken
  def loop(keys, taken)
    let
      key = @keys except not member?(map, key), loop(^keys, taken)
      value = get!(map, key)
    in loop(^keys, put(taken, key, value))

  loop(keys, new([]))
end
