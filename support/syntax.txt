%token EOF
%token ID
%token NUM
%token NL
%token sp
%token STR
%token SYM

%%

Module:     vsp ModName Imports Exports Stmts EOF ;
ModName:    "module" sp ID NL vsp | ;
Imports:    "import" ImportList NL vsp | ;
ImportList: vsp Import | ImportList "," vsp Import ;
Import:     ID sp Alias sp FnList ;
Alias:      "as" sp ID | ;
FnList:     "(" IDList ")" | ;
Exports:    "export" vsp IDList NL vsp | ;
Stmts:      vsp Stmt | Stmts NL vsp Stmt ;
Stmt:       Def | Expr ;
Def:        "def" sp ID "(" vsp Params ")" vsp DefGuard vsp Expr ;
Params:     IDList | ;
DefGuard:   "when" vsp Expr | ;
Expr:       Lambda sp | Logic sp ;
Lambda:     "\\" sp Params "->" vsp Expr ;
Logic:      Equal | Logic "and" vsp Equal | Logic "or" vsp Equal ;
Equal:      Pair | Pair "==" vsp Pair | Pair "!=" vsp Pair ;
Pair:       Join | Join  ":" vsp Pair ;
Join:       Compare | Join "<>" vsp Compare ;
Compare:    Shift | Compare "<" vsp Shift | Compare ">" vsp Shift ;
Shift:      Sum | Shift "<<" vsp Sum | Shift ">>" vsp Sum ;
Sum:        Product | Sum "+" vsp Product | Sum "-" vsp Product | Sum "|" vsp Product ;
Product:    Unary | Product "*" vsp Unary | Product "/" vsp Unary | Product "%" vsp Unary | Product "&" vsp Unary ;
Unary:      "-" Call | "~" Call | "#" Call | "@" Call | "^" Call | "not" vsp Call | Call ;
Call:       Qualifier | Call Args | Call Slice ;
Args:       "(" vsp Items ")" ;
Slice:      "[" vsp Expr vsp SliceEnd "]" ;
SliceEnd:   "," vsp Expr vsp | ;
Qualifier:  Primary | ID "." ID ;
Primary:    Group | Do | Let | If | List | Tuple | NUM | STR | SYM | Literal | ID ;
Group:      "(" vsp Expr vsp ")" ;
Do:         "do" vsp Stmts "end" ;
Let:        "let" vsp Assigns vsp "in" Expr;
Assigns:    Assign | Assigns vsp Assign ;
Assign:     ID sp "=" vsp Expr vsp LetGuard ;
LetGuard:   "except" vsp Expr vsp "else" vsp Expr | ;
If:         "if" vsp Clauses vsp "else" vsp Expr ;
Clauses:    Clause | Clauses NL Clause ;
Clause:     Expr vsp "," vsp Expr ;
List:       "[" vsp Items "]" ;
Tuple:      "{" vsp Items "}" ;
Literal:    "nil" | "true" | "false" ;
Items:      Expr vsp | Items "," vsp Expr vsp | ;
IDList:     ID sp | IDList "," vsp ID sp ;
vsp:        sp NL vsp | sp ;
