%token EOF
%token ID
%token NUM
%token NL
%token sp
%token STR
%token SYM

%%

Program:    vsp ModName Imports Stmts EOF ;
ModName:    "module" sp ID NL vsp Exports | ;
Exports:    "exports" sp IDList NL vsp | ;
Imports:    Imports Import | ;
Import:     "import" sp ID Alias NL vsp ;
Alias:      "as" sp ID | ;
Stmts:      vsp Stmt | Stmts NL Stmt ;
Stmt:       Def | Let | Struct | Expr ;
Def:        "def" sp ID "(" vsp Params ")" vsp Expr ;
Params:     IDList | ;
Let:        "let" sp Assigns ;
Assigns:    Assign | Assigns "," vsp Assign ;
Assign:     ID sp "=" vsp Expr ;
Expr:       Lambda | Logic ;
Lambda:     "\\" sp Params "->" vsp Expr ;
Logic:      Equal | Logic "and" vsp Equal | Logic "or" vsp Equal ;
Equal:      Pair | Pair "==" vsp Pair | Pair "!=" vsp Pair ;
Pair:       Join | Join  "|" vsp Pair ;
Join:       Compare | Join "<>" vsp Compare ;
Compare:    Shift | Compare "<" vsp Shift | Compare ">" vsp Shift ;
Shift:      Sum | Shift "<<" vsp Sum | Shift ">>" vsp Sum ;
Sum:        Product | Sum "+" vsp Product | Sum "-" vsp Product ;
Product:    Unary | Product "*" vsp Unary | Product "/" vsp Unary ;
Unary:      "-" Call | "~" Call | "#" Call | "not" vsp Call | Call ;
Call:       Access | Call Args | Call Slice ;
Args:       "(" vsp Items ")" ;
Slice:      "[" vsp Expr vsp SliceEnd "]" ;
SliceEnd:   ":" vsp Expr vsp | ;
Access:     Primary | Access "." ID ;
Primary:    Group | Do | If | Cond | List | Tuple | NUM | STR | SYM | Literal | ID ;
Group:      "(" vsp Expr vsp ")" sp ;
Do:         "do" vsp Stmts "end" sp ;
If:         "if" sp Expr "do" Stmts vsp Else "end" sp ;
Else:       "else" Stmts vsp | ;
Cond:       "cond" Clauses vsp "end" sp ;
Clauses:    vsp Clause | Clauses NL Clause ;
Clause:     Expr "->" vsp Expr ;
List:       "[" vsp Items "]" sp ;
Tuple:      "{" vsp Items "}" sp ;
Literal:    "nil" sp | "true" sp | "false" sp ;
Items:      Expr vsp | Items "," vsp Expr vsp | ;
IDList:     ID sp | IDList "," vsp ID sp ;
vsp:        sp NL vsp | sp ;
