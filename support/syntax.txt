Program     <- vsp (Modname Exports?)? Imports Stmts
Modname     <- "module" sp ID NL vsp
Exports     <- "exports" sp IDList NL vsp
Imports     <- ("import" sp ID ("as" sp ID)? NL vsp)*
Stmts       <- Stmt (NL vsp Stmt)* vsp
Stmt        <- (Def / Let / Expr)
Def         <- "def" sp ID "(" vsp IDList? ")" vsp Expr
Let         <- "let" sp Assign ("," vsp Assign)*
Assign      <- ID sp "=" vsp Expr
Expr        <- Lambda / Logic
Lambda      <- "\\" sp IDList? "->" vsp Expr
Logic       <- Equal (("and" / "or") vsp Equal)*
Equal       <- Compare (("==" / "!=") vsp Compare)?
Compare     <- Sum ([<>] vsp Sum)?
Sum         <- Product ([+-] vsp Product)*
Product     <- Unary ([*/] vsp Unary)*
Unary       <- [-~#] Call / "not" sp Call / Call
Call        <- Access ("(" vsp Args* vsp ")")* sp
Access      <- Primary ("." ID)*
Primary     <- Group / List / Tuple / Do / If / Cond / Num / Byte / Str / Sym / Literal / ID
Group       <- "(" vsp Expr vsp ")" sp
Do          <- "do" vsp Stmts "end" sp
If          <- "if" sp Expr "do" vsp Stmts ("else" vsp Stmts)? "end" sp
Cond        <- "cond" vsp Clause (NL vsp Clause)* "end"
Clause      <- Expr "->" vsp Expr
List        <- "[" vsp Args* vsp "]" sp
Tuple       <- "{" vsp Args* vsp "}" sp
Num         <- [0-9]+ sp
Byte        <- "$" . sp
Sym         <- ":" ID sp
Str         <- "\"" StrChar* "\""
StrChar     <- "\\" . / .
Literal     <- ("nil" / "true" / "false") sp
ID          <- [a-zA-Z_][a-zA-Z0-9_!?]* sp
IDList      <- ID ("," vsp ID)*
Args        <- Expr ("," vsp Expr)*
sp          <- (Space / Comment)*
Space       <- " " / "\t"
Comment     <- ";" (!NL .)*
NL          <- (("\n" / "\r") sp) / EndOfInput
vsp         <- sp NL*
EndOfInput  <- !.
