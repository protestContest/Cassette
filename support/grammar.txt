script          → module_def imports stmts | imports stmts
module_def      → "module" ID
imports         → import_stmt imports | ε
import_stmt     → "import" ID "\n"
                  | "import" ID "as" ID "\n"
                  | "import" ID "as" "*" "\n"

stmts           → stmts stmt | ε
stmt            → let_stmt | def_stmt | call_stmt
let_stmt        → "let" assigns "\n"
assigns         → assigns "," assign | assign
assign          → ID "=" call
def_stmt        → "def" "(" ID args ")" call "\n"
args            → args expr | ε
call_stmt       → call "\n"
call            → args expr

expr            → logic
logic           → equality | logic "and" equality | logic "or" equality
equality        → compare | equality "==" compare | equality "!=" compare
compare         → member
                  | compare "<" member
                  | compare ">" member
                  | compare "<=" member
                  | compare ">=" member
member          → concat | member "in" concat
concat          → pair | conat "<>" pair
pair            → sum | sum "|" pair
bitwise         → shift | bitwise "&" shift | bitwise "^" shift
shift           → sum | shift ">>" sum | shift "<<" sum
sum             → product | sum "+" product | sum "-" product
product         → unary | product "*" unary | product "/" unary | product "%" unary
unary           → access | "-" access | "not" access | "#" access | "~" access
access          → primary | access "." primary

primary         → group | lambda | block | obj | value | ID
group           → "(" call ")"
lambda          → "\" params "->" expr
params          → params ID | ε

block           → do_block | if_block | cond_block
do_block        → "do" stmts "end"
if_block        → "if" stmts "else" stmts "end" | "if" stmts "end"
cond_block      → "cond" clauses "end"
clauses         → clauses clause | ε
clause          → logic "->" call

obj             → list | tuple | map
list            → "[" list_tail
list_tail       → "]" | call "]" | call "," list_tail
tuple           → "{" tuple_tail
tuple_tail      → "}" | call "}" | call "," tuple_tail
map             → "{" entries "}"
entries         → entry | entry "," entries
entry           → ID ":" call

value           → "true" | "false" | "nil" | SYM | NUM | STR
