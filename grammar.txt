block           ::  expr (space* ("," | (newline (space | newline)*)) space* expr)*
expr            ::  (lambda (space+ lambda)*)
lambda          ::  logic (space* "->" space* logic)*
logic           ::  equality (space+ ("and" | "or") space+ equality)*
equality        ::  compare (space+ ("=" | "!=") space+ compare)*
compare         ::  term (space+ (">" | ">=" | "<" | "<=") space+ term)*
term            ::  factor (space+ ("+" | "-") space+ factor)*
factor          ::  exponent (space+ ("*" | "/") space+ exponent)*
exponent        ::  negative (space+ "**" space+ negative)*
negative        ::  ( ("-")? negative ) | access
access          ::  (identifier ("." identifier)*) | primary
primary         ::  literal | identifier | ( "(" (space | newline)* block ")" )
literal         ::  number | string | list | dict | symbol
number          ::  digit+ ("." digit+)?
string          ::  "\"" ( (char & !"\") | ("\" char) )* "\""
list            ::  "[" space* list-tail
list-tail       ::  (("|" space* expr)? "]") | (expr space* list-tail)
dict            ::  "{" dict-entry* "}"
dict-entry      ::  (identifier | string) space* ":" space* expr
symbol          ::  ":" identifier
identifier      ::  sym-start sym-char*
sym-start       ::  char & !reserved-char & !digit
sym-char        ::  char & !reserved-char
reserved-char   ::  group-char | space | ";" | "\"" | ":" | "." | "," | "|"
group-char      ::  "(" | ")" | "{" | "}" | "[" | "]"
space           ::  " " | "\t"
newline         ::  "\n" | "\r"
