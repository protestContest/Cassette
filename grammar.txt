block           ::  pipe (space* ("," | (newline (space | newline)*)) space* pipe)*
pipe            ::  expr ((space | newline)* "|>" (space | newline)* expr)*
expr            ::  (lambda (space+ lambda)*)
lambda          ::  logic (space* "->" space* expr)*
logic           ::  equality (space+ ("and" | "or") space+ equality)*
equality        ::  compare (space+ ("=" | "!=") space+ compare)*
compare         ::  range (space+ (">" | ">=" | "<" | "<=") space+ range)*
range           ::  term (space* ".." space* term)*
term            ::  factor (space+ ("+" | "-") space+ factor)*
factor          ::  exponent (space+ ("*" | "/") space+ exponent)*
exponent        ::  cons (space+ "**" space+ cons)*
cons            ::  negative (space* "|" space* negative)*
negative        ::  ( ("-")? negative ) | access
access          ::  (identifier ("." identifier)*) | primary
primary         ::  literal | identifier | ( "(" (space | newline)* block ")" )
literal         ::  number | string | list | dict | symbol | tuple
number          ::  digit+ ("." digit+)?
string          ::  "\"" ( (char & !"\") | ("\" char) )* "\""
list            ::  "[" (space|newline)* list-tail
list-tail       ::  "]" | (expr (space | newline)* list-tail)
dict            ::  "{" (space | newline)* dict-entry* "}"
dict-entry      ::  identifier ":" (space | newline)* expr (space | newline)*
symbol          ::  ":" identifier
tuple           ::  "#[" (space | newline)* list-tail
identifier      ::  sym-start sym-char*
sym-start       ::  char & !reserved-char & !digit
sym-char        ::  char & !reserved-char
reserved-char   ::  group-char | space | ";" | "\"" | ":" | "." | "," | "|"
group-char      ::  "(" | ")" | "{" | "}" | "[" | "]"
space           ::  " " | "\t"
newline         ::  "\n" | "\r"
