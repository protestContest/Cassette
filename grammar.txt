stmts         → stmts stmt NL
stmts         → stmts stmt $
stmts         → nl
stmt          → let_stmt
stmt          → import_stmt
stmt          → def_block
stmt          → call
opt_stmt      → stmt
opt_stmt      → ε
let_stmt      → "let" nl assigns
assigns       → assigns "," nl assign
assigns       → assign
assign        → ID "=" call
import_stmt   → "import" STR
import_stmt   → "import" STR "as" ID
def_block     → "def" "(" params nl ")" call
params        → params nl ID
params        → nl ID
call          → call arg
call          → arg
ml_call       → ml_call nl arg
ml_call       → arg
arg           → lambda
lambda        → group "->" nl logic
lambda        → ID "->" nl logic
lambda        → logic
logic         → logic "and" nl equals
logic         → logic "or" nl equals
logic         → equals
equals        → pair "==" nl pair
equals        → pair
pair          → compare "|" nl compare
pair          → compare
compare       → sum "<" nl sum
compare       → sum ">" nl sum
compare       → sum
sum           → sum "+" nl product
sum           → sum "-" nl product
sum           → product
product       → product "*" nl block
product       → product "/" nl block
product       → block
block         → do_block
block         → if_block
block         → cond_block
block         → primary
do_block      → "do" stmts opt_stmt "end"
if_block      → "if" nl arg nl "do" stmts opt_stmt "else" stmts opt_stmt "end"
if_block      → "if" nl arg nl "do" stmts opt_stmt "end"
cond_block    → "cond" "do" clauses "end"
clauses       → clauses clause
clauses       → NL
clause        → call "::" call NL
primary       → NUM
primary       → ID
primary       → STR
primary       → symbol
primary       → group
primary       → list
primary       → tuple
primary       → dict
primary       → access
access        → access "." ID
access        → ID "." ID
symbol        → ":" ID
group         → "(" ml_call ")"
list          → "[" items "]"
items         → items arg nl
items         → nl
tuple         → "#[" items "]"
dict          → "{" entries "}"
entries       → entries entry nl
entries       → nl
entry         → ID ":" nl arg
nl            → NL
nl            → $
nl            → ε
