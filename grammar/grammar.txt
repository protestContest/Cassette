stmts         → stmts stmt NL | NL | ε
stmt          → let_stmt | def_stmt | call

let_stmt      → "let" assigns
assigns       → assigns "," assign | assign
assign        → ID "=" call

def_stmt      → "def" "(" id_list ")" arg
id_list       → id_list ID | ID

call          → call arg | arg
arg           → lambda
lambda        → group "->" lambda | logic

logic         → logic "and" equals | logic "or" equals | equals
equals        → compare "==" compare | compare "!=" compare | compare
compare       → member ">" member | member ">=" member | member "<" member | member "<=" member | member
member        → sum "in" sum | sum
sum           → sum "+" product | sum "-" product | product
product       → product "*" unary | product "/" unary | unary
unary         → "not" primary | primary

primary       → NUM | ID | STR | literal | symbol | access | group | block | object
literal       → "true" | "false" | "nil"
symbol        → ":" ID
access        → access "." ID | ID "." ID
group         → "(" call ")"

block         → do_block | if_block | cond_block
do_block      → "do" stmts "end"
if_block      → "if" arg do_else
do_else       → "do" stmts "else" stmts "end"
cond_block    → "cond" "do" clauses "end"
clauses       → clauses clause | NL | ε
clause        → logic "->" call NL

object        → list | tuple | map
list          → "[" items "]"
tuple         → "#[" items "]"
map           → "{" entries "}"
items         → items item | ε
item          → arg opt_comma
entries       → entries entry | ε
entry         → ID ":" arg opt_comma

opt_comma     → "," | NL | ε
nothing       → ε
