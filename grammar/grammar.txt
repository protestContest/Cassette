stmts         → stmts stmt NL | stmts stmt $ | nl
stmt          → let_stmt | def_stmt | import_stmt | prim_call | call
opt_stmt      → stmt | ε
let_stmt      → "let" nl assigns
assigns       → assigns "," nl assign | assign
assign        → ID "=" call
def_stmt      → "def" "(" params ")" do_block
params        → params ID | ID
import_stmt   → "import" STR | "import" STR "as" ID
prim_call     → "@" ID call
call          → call arg | arg
ml_call       → ml_call nl arg | arg
arg           → lambda
lambda        → "(" ")" "->" nl logic
lambda        → group "->" nl logic
lambda        → ID "->" nl logic
lambda        → logic
logic         → logic "and" nl equals | logic "or" nl equals | equals
equals        → compare "==" nl compare | compare "!=" nl compare | compare
compare       → member "<" nl member | member "<=" nl member | member ">" nl member | member ">=" nl member | member
member        → sum "in" nl sum | sum
sum           → sum "+" nl product | sum "-" nl product | product
product       → product "*" nl block | product "/" nl block | block
block         → do_block | if_block | cond_block | unary
do_block      → "do" stmts opt_stmt "end"
if_block      → "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
if_block      → "if" arg do_block
cond_block    → "cond" "do" clauses "end"
clauses       → clauses clause | NL
clause        → logic "->" nl call NL
unary         → "not" primary | primary
primary       → NUM | ID | STR | literal | symbol | group | list | tuple | map | access
access        → access "." ID | ID "." ID
literal       → "true" | "false" | "nil"
symbol        → ":" ID
group         → "(" ml_call ")"
list          → "[" "]"
list          → "[" arg opt_comma items "]"
list          → "[" arg "|" arg "]"
items         → items arg opt_comma nl | nl
tuple         → "#[" items "]"
map           → "{" entries "}"
entries       → entries entry opt_comma nl | nl
entry         → ID ":" nl arg
nl            → NL | $ | ε
opt_comma     → "," | ε
