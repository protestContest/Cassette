State 0
  program         → · stmts $
  stmts           → · stmts stmt NL
  stmts           → · stmts stmt $
  stmts           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On stmts → 1
    On nl    → 2
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 1
  stmts           → stmts · stmt $
  stmts           → stmts · stmt NL
  program         → stmts · $
  stmt            → · let_stmt
  stmt            → · def_stmt
  stmt            → · import_stmt
  stmt            → · prim_call
  stmt            → · call
  let_stmt        → · "let" nl assigns
  def_stmt        → · "def" "(" params ")" do_block
  import_stmt     → · "import" STR
  import_stmt     → · "import" STR "as" ID
  prim_call       → · "@" ID call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On stmt        → 5
    On $           → 6
    On let_stmt    → 7
    On def_stmt    → 8
    On import_stmt → 9
    On prim_call   → 10
    On call        → 11
    On "let"       → 12
    On "def"       → 13
    On "import"    → 14
    On "@"         → 15
    On arg         → 16
    On lambda      → 17
    On "("         → 18
    On group       → 19
    On ID          → 20
    On logic       → 21
    On equals      → 22
    On compare     → 23
    On member      → 24
    On sum         → 25
    On product     → 26
    On block       → 27
    On do_block    → 28
    On if_block    → 29
    On cond_block  → 30
    On unary       → 31
    On "do"        → 32
    On "if"        → 33
    On "cond"      → 34
    On "not"       → 35
    On primary     → 36
    On NUM         → 37
    On STR         → 38
    On literal     → 39
    On symbol      → 40
    On list        → 41
    On tuple       → 42
    On map         → 43
    On access      → 44
    On "true"      → 45
    On "false"     → 46
    On "nil"       → 47
    On ":"         → 48
    On "["         → 49
    On "#["        → 50
    On "{"         → 51

State 2
  stmts           → nl ·
    Reduce 4 (stmts, 1)

State 3
  nl              → NL ·
    Reduce 90 (nl, 1)

State 4
  nl              → $ ·
    Reduce 91 (nl, 1)

State 5
  stmts           → stmts stmt · NL
  stmts           → stmts stmt · $
    On NL → 52
    On $  → 53

State 6
  program         → stmts $ ·
    Reduce 1 (program, 2)

State 7
  stmt            → let_stmt ·
    Reduce 5 (stmt, 1)

State 8
  stmt            → def_stmt ·
    Reduce 6 (stmt, 1)

State 9
  stmt            → import_stmt ·
    Reduce 7 (stmt, 1)

State 10
  stmt            → prim_call ·
    Reduce 8 (stmt, 1)

State 11
  call            → call · arg
  stmt            → call ·
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 54
    On lambda     → 17
    On "("        → 18
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51
    Reduce 9 (stmt, 1)

State 12
  let_stmt        → "let" · nl assigns
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 55
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 13
  def_stmt        → "def" · "(" params ")" do_block
    On "(" → 56

State 14
  import_stmt     → "import" · STR "as" ID
  import_stmt     → "import" · STR
    On STR → 57

State 15
  prim_call       → "@" · ID call
    On ID → 58

State 16
  call            → arg ·
    Reduce 23 (call, 1)

State 17
  arg             → lambda ·
    Reduce 26 (arg, 1)

State 18
  group           → "(" · ml_call ")"
  lambda          → "(" · ")" "->" nl logic
  ml_call         → · ml_call nl arg
  ml_call         → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On ml_call    → 59
    On ")"        → 60
    On arg        → 61
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 19
  primary         → group ·
  lambda          → group · "->" nl logic
    On "->" → 63
    Reduce 68 (primary, 1)

State 20
  access          → ID · "." ID
  primary         → ID ·
  lambda          → ID · "->" nl logic
    On "." → 64
    On "->" → 65
    Reduce 64 (primary, 1)

State 21
  logic           → logic · "or" nl equals
  logic           → logic · "and" nl equals
  lambda          → logic ·
    On "or" → 66
    On "and" → 67
    Reduce 30 (lambda, 1)

State 22
  logic           → equals ·
    Reduce 33 (logic, 1)

State 23
  equals          → compare ·
  equals          → compare · "!=" nl compare
  equals          → compare · "==" nl compare
    On "!=" → 68
    On "==" → 69
    Reduce 36 (equals, 1)

State 24
  compare         → member ·
  compare         → member · ">=" nl member
  compare         → member · ">" nl member
  compare         → member · "<=" nl member
  compare         → member · "<" nl member
    On ">=" → 70
    On ">" → 71
    On "<=" → 72
    On "<" → 73
    Reduce 41 (compare, 1)

State 25
  sum             → sum · "-" nl product
  sum             → sum · "+" nl product
  member          → sum ·
  member          → sum · "in" nl sum
    On "-" → 74
    On "+" → 75
    On "in" → 76
    Reduce 43 (member, 1)

State 26
  product         → product · "/" nl block
  product         → product · "*" nl block
  sum             → product ·
    On "/" → 77
    On "*" → 78
    Reduce 46 (sum, 1)

State 27
  product         → block ·
    Reduce 49 (product, 1)

State 28
  block           → do_block ·
    Reduce 50 (block, 1)

State 29
  block           → if_block ·
    Reduce 51 (block, 1)

State 30
  block           → cond_block ·
    Reduce 52 (block, 1)

State 31
  block           → unary ·
    Reduce 53 (block, 1)

State 32
  do_block        → "do" · stmts opt_stmt "end"
  stmts           → · stmts stmt NL
  stmts           → · stmts stmt $
  stmts           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On stmts → 79
    On nl    → 2
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 33
  if_block        → "if" · arg do_block
  if_block        → "if" · arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 80
    On lambda     → 17
    On "("        → 18
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 34
  cond_block      → "cond" · "do" clauses "end"
    On "do" → 82

State 35
  unary           → "not" · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On primary → 83
    On NUM     → 37
    On ID      → 84
    On STR     → 38
    On literal → 39
    On symbol  → 40
    On group   → 85
    On list    → 41
    On tuple   → 42
    On map     → 43
    On access  → 44
    On "true"  → 45
    On "false" → 46
    On "nil"   → 47
    On ":"     → 48
    On "("     → 86
    On "["     → 49
    On "#["    → 50
    On "{"     → 51

State 36
  unary           → primary ·
    Reduce 62 (unary, 1)

State 37
  primary         → NUM ·
    Reduce 63 (primary, 1)

State 38
  primary         → STR ·
    Reduce 65 (primary, 1)

State 39
  primary         → literal ·
    Reduce 66 (primary, 1)

State 40
  primary         → symbol ·
    Reduce 67 (primary, 1)

State 41
  primary         → list ·
    Reduce 69 (primary, 1)

State 42
  primary         → tuple ·
    Reduce 70 (primary, 1)

State 43
  primary         → map ·
    Reduce 71 (primary, 1)

State 44
  access          → access · "." ID
  primary         → access ·
    On "." → 87
    Reduce 72 (primary, 1)

State 45
  literal         → "true" ·
    Reduce 75 (literal, 1)

State 46
  literal         → "false" ·
    Reduce 76 (literal, 1)

State 47
  literal         → "nil" ·
    Reduce 77 (literal, 1)

State 48
  symbol          → ":" · ID
    On ID → 88

State 49
  list            → "[" · arg "|" arg "]"
  list            → "[" · arg opt_comma items "]"
  list            → "[" · "]"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 89
    On "]"        → 90
    On lambda     → 17
    On "("        → 18
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 50
  tuple           → "#[" · items "]"
  items           → · items arg opt_comma nl
  items           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On items → 92
    On nl    → 93
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 51
  map             → "{" · entries "}"
  entries         → · entries entry opt_comma nl
  entries         → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On entries → 94
    On nl      → 95
    On NL      → 3
    On $       → 4
    Reduce 92 (nl, 0)

State 52
  stmts           → stmts stmt NL ·
    Reduce 2 (stmts, 3)

State 53
  stmts           → stmts stmt $ ·
    Reduce 3 (stmts, 3)

State 54
  call            → call arg ·
    Reduce 22 (call, 2)

State 55
  let_stmt        → "let" nl · assigns
  assigns         → · assigns "," nl assign
  assigns         → · assign
  assign          → · ID "=" call
    On assigns → 96
    On assign  → 97
    On ID      → 98

State 56
  def_stmt        → "def" "(" · params ")" do_block
  params          → · params ID
  params          → · ID
    On params → 99
    On ID     → 100

State 57
  import_stmt     → "import" STR ·
  import_stmt     → "import" STR · "as" ID
    On "as" → 101
    Reduce 19 (import_stmt, 2)

State 58
  prim_call       → "@" ID · call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On call       → 102
    On arg        → 16
    On lambda     → 17
    On "("        → 18
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 59
  ml_call         → ml_call · nl arg
  group           → "(" ml_call · ")"
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 103
    On ")" → 104
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 60
  lambda          → "(" ")" · "->" nl logic
    On "->" → 105

State 61
  ml_call         → arg ·
    Reduce 25 (ml_call, 1)

State 62
  group           → "(" · ml_call ")"
  lambda          → "(" · ")" "->" nl logic
  ml_call         → · ml_call nl arg
  ml_call         → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On ml_call    → 59
    On ")"        → 60
    On arg        → 61
    On lambda     → 17
    On "("        → 18
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 63
  lambda          → group "->" · nl logic
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 106
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 64
  access          → ID "." · ID
    On ID → 107

State 65
  lambda          → ID "->" · nl logic
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 108
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 66
  logic           → logic "or" · nl equals
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 109
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 67
  logic           → logic "and" · nl equals
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 110
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 68
  equals          → compare "!=" · nl compare
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 111
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 69
  equals          → compare "==" · nl compare
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 112
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 70
  compare         → member ">=" · nl member
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 113
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 71
  compare         → member ">" · nl member
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 114
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 72
  compare         → member "<=" · nl member
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 115
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 73
  compare         → member "<" · nl member
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 116
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 74
  sum             → sum "-" · nl product
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 117
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 75
  sum             → sum "+" · nl product
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 118
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 76
  member          → sum "in" · nl sum
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 119
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 77
  product         → product "/" · nl block
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 120
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 78
  product         → product "*" · nl block
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 121
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 79
  stmts           → stmts · stmt $
  stmts           → stmts · stmt NL
  do_block        → "do" stmts · opt_stmt "end"
  stmt            → · let_stmt
  stmt            → · def_stmt
  stmt            → · import_stmt
  stmt            → · prim_call
  stmt            → · call
  opt_stmt        → · stmt
  opt_stmt        → ε
  let_stmt        → · "let" nl assigns
  def_stmt        → · "def" "(" params ")" do_block
  import_stmt     → · "import" STR
  import_stmt     → · "import" STR "as" ID
  prim_call       → · "@" ID call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On stmt        → 122
    On opt_stmt    → 123
    On let_stmt    → 7
    On def_stmt    → 8
    On import_stmt → 9
    On prim_call   → 10
    On call        → 11
    On "let"       → 12
    On "def"       → 13
    On "import"    → 14
    On "@"         → 15
    On arg         → 16
    On lambda      → 17
    On "("         → 62
    On group       → 19
    On ID          → 20
    On logic       → 21
    On equals      → 22
    On compare     → 23
    On member      → 24
    On sum         → 25
    On product     → 26
    On block       → 27
    On do_block    → 28
    On if_block    → 29
    On cond_block  → 30
    On unary       → 31
    On "do"        → 32
    On "if"        → 33
    On "cond"      → 34
    On "not"       → 35
    On primary     → 36
    On NUM         → 37
    On STR         → 38
    On literal     → 39
    On symbol      → 40
    On list        → 41
    On tuple       → 42
    On map         → 43
    On access      → 44
    On "true"      → 45
    On "false"     → 46
    On "nil"       → 47
    On ":"         → 48
    On "["         → 49
    On "#["        → 50
    On "{"         → 51
    Reduce 11 (opt_stmt, 0)

State 80
  if_block        → "if" arg · "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → "if" arg · do_block
  do_block        → · "do" stmts opt_stmt "end"
    On "do"     → 124
    On do_block → 125

State 81
  if_block        → "if" · arg do_block
  if_block        → "if" · arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 80
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 33
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 82
  cond_block      → "cond" "do" · clauses "end"
  clauses         → · clauses clause
  clauses         → · NL
    On clauses → 126
    On NL      → 127

State 83
  unary           → "not" primary ·
    Reduce 61 (unary, 2)

State 84
  access          → ID · "." ID
  primary         → ID ·
    On "." → 64
    Reduce 64 (primary, 1)

State 85
  primary         → group ·
    Reduce 68 (primary, 1)

State 86
  group           → "(" · ml_call ")"
  ml_call         → · ml_call nl arg
  ml_call         → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On ml_call    → 59
    On arg        → 61
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 87
  access          → access "." · ID
    On ID → 128

State 88
  symbol          → ":" ID ·
    Reduce 78 (symbol, 2)

State 89
  list            → "[" arg · opt_comma items "]"
  list            → "[" arg · "|" arg "]"
  opt_comma       → · ","
  opt_comma       → ε
    On opt_comma → 129
    On "|"       → 130
    On ","       → 131
    Reduce 94 (opt_comma, 0)

State 90
  list            → "[" "]" ·
    Reduce 80 (list, 2)

State 91
  list            → "[" · arg "|" arg "]"
  list            → "[" · arg opt_comma items "]"
  list            → "[" · "]"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 89
    On "]"        → 90
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 49
    On "#["       → 50
    On "{"        → 51

State 92
  items           → items · arg opt_comma nl
  tuple           → "#[" items · "]"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 132
    On "]"        → 133
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 93
  items           → nl ·
    Reduce 84 (items, 1)

State 94
  entries         → entries · entry opt_comma nl
  map             → "{" entries · "}"
  entry           → · ID ":" nl arg
    On entry → 134
    On "}"   → 135
    On ID    → 136

State 95
  entries         → nl ·
    Reduce 88 (entries, 1)

State 96
  assigns         → assigns · "," nl assign
  let_stmt        → "let" nl assigns ·
    On "," → 137
    Reduce 12 (let_stmt, 3)

State 97
  assigns         → assign ·
    Reduce 14 (assigns, 1)

State 98
  assign          → ID · "=" call
    On "=" → 138

State 99
  params          → params · ID
  def_stmt        → "def" "(" params · ")" do_block
    On ID → 139
    On ")" → 140

State 100
  params          → ID ·
    Reduce 18 (params, 1)

State 101
  import_stmt     → "import" STR "as" · ID
    On ID → 141

State 102
  call            → call · arg
  prim_call       → "@" ID call ·
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 54
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51
    Reduce 21 (prim_call, 3)

State 103
  ml_call         → ml_call nl · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 142
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 104
  group           → "(" ml_call ")" ·
    Reduce 79 (group, 3)

State 105
  lambda          → "(" ")" "->" · nl logic
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 143
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 106
  lambda          → group "->" nl · logic
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On logic      → 144
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 107
  access          → ID "." ID ·
    Reduce 74 (access, 3)

State 108
  lambda          → ID "->" nl · logic
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On logic      → 145
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 109
  logic           → logic "or" nl · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On equals     → 146
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 110
  logic           → logic "and" nl · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On equals     → 147
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 111
  equals          → compare "!=" nl · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On compare    → 148
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 112
  equals          → compare "==" nl · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On compare    → 149
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 113
  compare         → member ">=" nl · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On member     → 150
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 114
  compare         → member ">" nl · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On member     → 151
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 115
  compare         → member "<=" nl · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On member     → 152
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 116
  compare         → member "<" nl · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On member     → 153
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 117
  sum             → sum "-" nl · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On product    → 154
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 118
  sum             → sum "+" nl · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On product    → 155
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 119
  member          → sum "in" nl · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On sum        → 156
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 120
  product         → product "/" nl · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On block      → 157
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 121
  product         → product "*" nl · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On block      → 158
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 122
  opt_stmt        → stmt ·
  stmts           → stmts stmt · NL
  stmts           → stmts stmt · $
    On NL → 52
    On $  → 53
    Reduce 10 (opt_stmt, 1)

State 123
  do_block        → "do" stmts opt_stmt · "end"
    On "end" → 159

State 124
  do_block        → "do" · stmts opt_stmt "end"
  if_block        → "if" arg "do" · stmts opt_stmt "else" stmts opt_stmt "end"
  stmts           → · stmts stmt NL
  stmts           → · stmts stmt $
  stmts           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On stmts → 160
    On nl    → 2
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 125
  if_block        → "if" arg do_block ·
    Reduce 56 (if_block, 3)

State 126
  clauses         → clauses · clause
  cond_block      → "cond" "do" clauses · "end"
  clause          → · logic "->" nl call NL
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On clause     → 161
    On "end"      → 162
    On logic      → 163
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 127
  clauses         → NL ·
    Reduce 59 (clauses, 1)

State 128
  access          → access "." ID ·
    Reduce 73 (access, 3)

State 129
  list            → "[" arg opt_comma · items "]"
  items           → · items arg opt_comma nl
  items           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On items → 164
    On nl    → 93
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 130
  list            → "[" arg "|" · arg "]"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 165
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 131
  opt_comma       → "," ·
    Reduce 93 (opt_comma, 1)

State 132
  items           → items arg · opt_comma nl
  opt_comma       → · ","
  opt_comma       → ε
    On opt_comma → 166
    On ","       → 131
    Reduce 94 (opt_comma, 0)

State 133
  tuple           → "#[" items "]" ·
    Reduce 85 (tuple, 3)

State 134
  entries         → entries entry · opt_comma nl
  opt_comma       → · ","
  opt_comma       → ε
    On opt_comma → 167
    On ","       → 131
    Reduce 94 (opt_comma, 0)

State 135
  map             → "{" entries "}" ·
    Reduce 86 (map, 3)

State 136
  entry           → ID · ":" nl arg
    On ":" → 168

State 137
  assigns         → assigns "," · nl assign
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 169
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 138
  assign          → ID "=" · call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On call       → 170
    On arg        → 16
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 139
  params          → params ID ·
    Reduce 17 (params, 2)

State 140
  def_stmt        → "def" "(" params ")" · do_block
  do_block        → · "do" stmts opt_stmt "end"
    On do_block → 171
    On "do"     → 32

State 141
  import_stmt     → "import" STR "as" ID ·
    Reduce 20 (import_stmt, 4)

State 142
  ml_call         → ml_call nl arg ·
    Reduce 24 (ml_call, 3)

State 143
  lambda          → "(" ")" "->" nl · logic
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  group           → · "(" ml_call ")"
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On logic      → 172
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On ID         → 84
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On group      → 85
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "("        → 86
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 144
  logic           → logic · "or" nl equals
  logic           → logic · "and" nl equals
  lambda          → group "->" nl logic ·
    On "or" → 66
    On "and" → 67
    Reduce 28 (lambda, 4)

State 145
  logic           → logic · "or" nl equals
  logic           → logic · "and" nl equals
  lambda          → ID "->" nl logic ·
    On "or" → 66
    On "and" → 67
    Reduce 29 (lambda, 4)

State 146
  logic           → logic "or" nl equals ·
    Reduce 32 (logic, 4)

State 147
  logic           → logic "and" nl equals ·
    Reduce 31 (logic, 4)

State 148
  equals          → compare "!=" nl compare ·
    Reduce 35 (equals, 4)

State 149
  equals          → compare "==" nl compare ·
    Reduce 34 (equals, 4)

State 150
  compare         → member ">=" nl member ·
    Reduce 40 (compare, 4)

State 151
  compare         → member ">" nl member ·
    Reduce 39 (compare, 4)

State 152
  compare         → member "<=" nl member ·
    Reduce 38 (compare, 4)

State 153
  compare         → member "<" nl member ·
    Reduce 37 (compare, 4)

State 154
  product         → product · "/" nl block
  product         → product · "*" nl block
  sum             → sum "-" nl product ·
    On "/" → 77
    On "*" → 78
    Reduce 45 (sum, 4)

State 155
  product         → product · "/" nl block
  product         → product · "*" nl block
  sum             → sum "+" nl product ·
    On "/" → 77
    On "*" → 78
    Reduce 44 (sum, 4)

State 156
  sum             → sum · "-" nl product
  sum             → sum · "+" nl product
  member          → sum "in" nl sum ·
    On "-" → 74
    On "+" → 75
    Reduce 42 (member, 4)

State 157
  product         → product "/" nl block ·
    Reduce 48 (product, 4)

State 158
  product         → product "*" nl block ·
    Reduce 47 (product, 4)

State 159
  do_block        → "do" stmts opt_stmt "end" ·
    Reduce 54 (do_block, 4)

State 160
  stmts           → stmts · stmt $
  stmts           → stmts · stmt NL
  if_block        → "if" arg "do" stmts · opt_stmt "else" stmts opt_stmt "end"
  do_block        → "do" stmts · opt_stmt "end"
  stmt            → · let_stmt
  stmt            → · def_stmt
  stmt            → · import_stmt
  stmt            → · prim_call
  stmt            → · call
  opt_stmt        → · stmt
  opt_stmt        → ε
  let_stmt        → · "let" nl assigns
  def_stmt        → · "def" "(" params ")" do_block
  import_stmt     → · "import" STR
  import_stmt     → · "import" STR "as" ID
  prim_call       → · "@" ID call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On stmt        → 122
    On opt_stmt    → 173
    On let_stmt    → 7
    On def_stmt    → 8
    On import_stmt → 9
    On prim_call   → 10
    On call        → 11
    On "let"       → 12
    On "def"       → 13
    On "import"    → 14
    On "@"         → 15
    On arg         → 16
    On lambda      → 17
    On "("         → 62
    On group       → 19
    On ID          → 20
    On logic       → 21
    On equals      → 22
    On compare     → 23
    On member      → 24
    On sum         → 25
    On product     → 26
    On block       → 27
    On do_block    → 28
    On if_block    → 29
    On cond_block  → 30
    On unary       → 31
    On "do"        → 32
    On "if"        → 81
    On "cond"      → 34
    On "not"       → 35
    On primary     → 36
    On NUM         → 37
    On STR         → 38
    On literal     → 39
    On symbol      → 40
    On list        → 41
    On tuple       → 42
    On map         → 43
    On access      → 44
    On "true"      → 45
    On "false"     → 46
    On "nil"       → 47
    On ":"         → 48
    On "["         → 91
    On "#["        → 50
    On "{"         → 51
    Reduce 11 (opt_stmt, 0)

State 161
  clauses         → clauses clause ·
    Reduce 58 (clauses, 2)

State 162
  cond_block      → "cond" "do" clauses "end" ·
    Reduce 57 (cond_block, 4)

State 163
  logic           → logic · "or" nl equals
  logic           → logic · "and" nl equals
  clause          → logic · "->" nl call NL
    On "or" → 66
    On "and" → 67
    On "->" → 174

State 164
  items           → items · arg opt_comma nl
  list            → "[" arg opt_comma items · "]"
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 132
    On "]"        → 175
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 165
  list            → "[" arg "|" arg · "]"
    On "]" → 176

State 166
  items           → items arg opt_comma · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 177
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 167
  entries         → entries entry opt_comma · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 178
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 168
  entry           → ID ":" · nl arg
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 179
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 169
  assigns         → assigns "," nl · assign
  assign          → · ID "=" call
    On assign → 180
    On ID     → 98

State 170
  call            → call · arg
  assign          → ID "=" call ·
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 54
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51
    Reduce 15 (assign, 3)

State 171
  def_stmt        → "def" "(" params ")" do_block ·
    Reduce 16 (def_stmt, 5)

State 172
  logic           → logic · "or" nl equals
  logic           → logic · "and" nl equals
  lambda          → "(" ")" "->" nl logic ·
    On "or" → 66
    On "and" → 67
    Reduce 27 (lambda, 5)

State 173
  do_block        → "do" stmts opt_stmt · "end"
  if_block        → "if" arg "do" stmts opt_stmt · "else" stmts opt_stmt "end"
    On "end" → 159
    On "else" → 181

State 174
  clause          → logic "->" · nl call NL
  nl              → · NL
  nl              → · $
  nl              → ε
    On nl → 182
    On NL → 3
    On $  → 4
    Reduce 92 (nl, 0)

State 175
  list            → "[" arg opt_comma items "]" ·
    Reduce 81 (list, 5)

State 176
  list            → "[" arg "|" arg "]" ·
    Reduce 82 (list, 5)

State 177
  items           → items arg opt_comma nl ·
    Reduce 83 (items, 4)

State 178
  entries         → entries entry opt_comma nl ·
    Reduce 87 (entries, 4)

State 179
  entry           → ID ":" nl · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 183
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 180
  assigns         → assigns "," nl assign ·
    Reduce 13 (assigns, 4)

State 181
  if_block        → "if" arg "do" stmts opt_stmt "else" · stmts opt_stmt "end"
  stmts           → · stmts stmt NL
  stmts           → · stmts stmt $
  stmts           → · nl
  nl              → · NL
  nl              → · $
  nl              → ε
    On stmts → 184
    On nl    → 2
    On NL    → 3
    On $     → 4
    Reduce 92 (nl, 0)

State 182
  clause          → logic "->" nl · call NL
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On call       → 185
    On arg        → 16
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 183
  entry           → ID ":" nl arg ·
    Reduce 89 (entry, 4)

State 184
  stmts           → stmts · stmt $
  stmts           → stmts · stmt NL
  if_block        → "if" arg "do" stmts opt_stmt "else" stmts · opt_stmt "end"
  stmt            → · let_stmt
  stmt            → · def_stmt
  stmt            → · import_stmt
  stmt            → · prim_call
  stmt            → · call
  opt_stmt        → · stmt
  opt_stmt        → ε
  let_stmt        → · "let" nl assigns
  def_stmt        → · "def" "(" params ")" do_block
  import_stmt     → · "import" STR
  import_stmt     → · "import" STR "as" ID
  prim_call       → · "@" ID call
  call            → · call arg
  call            → · arg
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On stmt        → 122
    On opt_stmt    → 186
    On let_stmt    → 7
    On def_stmt    → 8
    On import_stmt → 9
    On prim_call   → 10
    On call        → 11
    On "let"       → 12
    On "def"       → 13
    On "import"    → 14
    On "@"         → 15
    On arg         → 16
    On lambda      → 17
    On "("         → 62
    On group       → 19
    On ID          → 20
    On logic       → 21
    On equals      → 22
    On compare     → 23
    On member      → 24
    On sum         → 25
    On product     → 26
    On block       → 27
    On do_block    → 28
    On if_block    → 29
    On cond_block  → 30
    On unary       → 31
    On "do"        → 32
    On "if"        → 81
    On "cond"      → 34
    On "not"       → 35
    On primary     → 36
    On NUM         → 37
    On STR         → 38
    On literal     → 39
    On symbol      → 40
    On list        → 41
    On tuple       → 42
    On map         → 43
    On access      → 44
    On "true"      → 45
    On "false"     → 46
    On "nil"       → 47
    On ":"         → 48
    On "["         → 91
    On "#["        → 50
    On "{"         → 51
    Reduce 11 (opt_stmt, 0)

State 185
  call            → call · arg
  clause          → logic "->" nl call · NL
  arg             → · lambda
  lambda          → · "(" ")" "->" nl logic
  lambda          → · group "->" nl logic
  lambda          → · ID "->" nl logic
  lambda          → · logic
  group           → · "(" ml_call ")"
  logic           → · logic "and" nl equals
  logic           → · logic "or" nl equals
  logic           → · equals
  equals          → · compare "==" nl compare
  equals          → · compare "!=" nl compare
  equals          → · compare
  compare         → · member "<" nl member
  compare         → · member "<=" nl member
  compare         → · member ">" nl member
  compare         → · member ">=" nl member
  compare         → · member
  member          → · sum "in" nl sum
  member          → · sum
  sum             → · sum "+" nl product
  sum             → · sum "-" nl product
  sum             → · product
  product         → · product "*" nl block
  product         → · product "/" nl block
  product         → · block
  block           → · do_block
  block           → · if_block
  block           → · cond_block
  block           → · unary
  do_block        → · "do" stmts opt_stmt "end"
  if_block        → · "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end"
  if_block        → · "if" arg do_block
  cond_block      → · "cond" "do" clauses "end"
  unary           → · "not" primary
  unary           → · primary
  primary         → · NUM
  primary         → · ID
  primary         → · STR
  primary         → · literal
  primary         → · symbol
  primary         → · group
  primary         → · list
  primary         → · tuple
  primary         → · map
  primary         → · access
  literal         → · "true"
  literal         → · "false"
  literal         → · "nil"
  symbol          → · ":" ID
  list            → · "[" "]"
  list            → · "[" arg opt_comma items "]"
  list            → · "[" arg "|" arg "]"
  tuple           → · "#[" items "]"
  map             → · "{" entries "}"
  access          → · access "." ID
  access          → · ID "." ID
    On arg        → 54
    On NL         → 187
    On lambda     → 17
    On "("        → 62
    On group      → 19
    On ID         → 20
    On logic      → 21
    On equals     → 22
    On compare    → 23
    On member     → 24
    On sum        → 25
    On product    → 26
    On block      → 27
    On do_block   → 28
    On if_block   → 29
    On cond_block → 30
    On unary      → 31
    On "do"       → 32
    On "if"       → 81
    On "cond"     → 34
    On "not"      → 35
    On primary    → 36
    On NUM        → 37
    On STR        → 38
    On literal    → 39
    On symbol     → 40
    On list       → 41
    On tuple      → 42
    On map        → 43
    On access     → 44
    On "true"     → 45
    On "false"    → 46
    On "nil"      → 47
    On ":"        → 48
    On "["        → 91
    On "#["       → 50
    On "{"        → 51

State 186
  if_block        → "if" arg "do" stmts opt_stmt "else" stmts opt_stmt · "end"
    On "end" → 188

State 187
  clause          → logic "->" nl call NL ·
    Reduce 60 (clause, 5)

State 188
  if_block        → "if" arg "do" stmts opt_stmt "else" stmts opt_stmt "end" ·
    Reduce 55 (if_block, 9)

