module File
import List
import String
import Stream
import Enum

def (open path mode) (Device.open :file {path, mode})
def (open! path mode) (unwrap! (Device.open :file {path, mode}))
def (close file) (Device.close file)
def (read file n) (Device.read file n)
def (read! file n) (unwrap! (Device.read file n))

def (list-dir path) do
  let dir = Device.open :directory {path}
  if not (ok? dir) do
    nil
  else
    let dir = (unwrap dir nil),
        items = Device.read dir nil
    Device.close dir
    unwrap items nil
  end
end

def (dirname path) do
  cond do
    path == nil -> nil
    path.(#path - 1) == $/ -> String.slice path 0 #path - 1
    true -> String.slice path 0 (Enum.last-index-of $/ path)
  end
end

def (basename path) do
  let index = Enum.last-index-of $/ path
  (tail (Type.split-bin path index))
end

def (abs-path path) do
  if #path == 0 do
    nil
  else
    let dir = Device.open :directory {path}

    if (ok? dir) do
      let path = unwrap (Device.get-param (unwrap! dir) :path) nil
      Device.close (tail dir)
      path
    else
      let dirpath = abs-path (dirname path)
      if dirpath do
        dirpath <> "/" <> (basename path)
      else
        nil
      end
    end
  end
end

def (join-path left right) do
  cond do
    #left == 0 ->
      right
    #right == 0 ->
      left
    left.(#left - 1) == $/ ->
      join-path (head (Type.split-bin left (#left - 1))) right
    right.0 == $/ ->
      join-path left (tail (Type.split-bin right 1))
    true ->
      left <> "/" <> right
  end
end

def (exists? path) do
  let path = abs-path path,
      dir = dirname path

  List.any? \item -> path == (join-path dir item.0) (list-dir dir)
end
