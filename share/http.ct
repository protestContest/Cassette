module HTTP
import Net, Value (binary?, tuple?, error?), String, IO
export new, request, get, post

def new(host, headers) {host, headers}

def get(conn, path)
  if
    binary?(conn), request("GET", conn, path, nil, nil)
    tuple?(conn) and #conn == 2, request("GET", conn[0], path, conn[1], nil)
    else {:error, "Invalid conn type"}

def post(conn, path, body)
  if
    binary?(conn), request("POST", conn, path, nil, body)
    tuple?(conn) and #conn == 2, request("POST", conn[0], path, conn[1], body)
    else {:error, "Invalid conn type"}

def request(method, host, path, headers, body) do
  let headers = String.join(headers, "\r\n")
  let req = String.join([
      [method, " ", path, " HTTP/1.1"],
      ["Host: ", host],
      ["Connection: close"],
      headers,
      "",
      body
    ], "\r\n")
  let conn = Net.connect(host, "80")
  guard not error?(conn) else conn
  let result = IO.write(conn, req)
  guard not error?(result) else result
  IO.read(conn)
end
