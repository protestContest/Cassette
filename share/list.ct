module List
export
  all?, any?, at,
  concat, contains?, count,
  delete, drop, duplicate,
  filter, head, insert, intersperse, iota,
  map, reduce, replace, reverse, reverse_onto,
  slice, split, tail, take,
  with_index, zip

def all?(list) when list == nil, true
def all?(list) when @list, all?(^list)
def all?(list) false

def any?(list) when list == nil, false
def any?(list) when @list, true
def any?(list) any?(^list)

def at(list, index) when list == nil, nil
def at(list, index) when index == 0, @list
def at(list, index) at(^list, index - 1)

; def chunk_by(list, fn)

def concat(left, right)
  reverse_onto(reverse(left), right)

def contains?(list, item) when list == nil, false
def contains?(list, item) when @list == item, true
def contains?(list, item) contains?(^list, item)

def count(list) do
  def loop(list, n) when list == nil, n
  def loop(list, n) loop(^list, n+1)
  loop(list, 0)
end

def delete(list, index)
  let parts = split(list, index)
  in concat(parts[0], ^parts[1])

def drop(list, n) when list == nil, nil
def drop(list, n) when n == 0, list
def drop(list, n) drop(^list, n - 1)

def duplicate(item, n) do
  def loop(list, n) when n == 0, list
  def loop(list, n) loop(item : list, n - 1)
  loop(nil, n)
end

def filter(list, test)
  let list =
    reduce(list, nil, \item, acc ->
      if test(item), item : acc
      else acc)
  in reverse(list)

; def find(list, test)
; def find_index(list, test)
; def find_value(list, fn)
; def flatten(list)
; def flatten_onto(list, tail)

def head(list) @list

def insert(list, index, item)
  let parts = split(list, index)
  in concat(parts[0], item : parts[1])

def intersperse(list, sep) when list == nil, nil
def intersperse(list, sep) when ^list == nil, list
def intersperse(list, sep)
  reverse(reduce(^list, [@list], \item, acc -> item : sep : acc))

def iota(n) do
  def loop(n, list) when n == 0, list
  def loop(n, list) loop(n - 1, (n - 1) : list)
  loop(n, nil)
end

def map(list, fn)
  reverse(reduce(list, nil, \item, acc -> fn(item) : acc))

def reduce(list, acc, fn) when list == nil, acc
def reduce(list, acc, fn) reduce(^list, fn(@list, acc), fn)

def replace(list, index, item)
  let parts = split(list, index)
  in concat(parts[0], item : ^parts[1])

def reverse(list) reverse_onto(list, nil)

def reverse_onto(list, tail)
  reduce(list, tail, \item, acc -> item : acc)

def slice(list, start, length)
  take(drop(list, start), length)

def split(list, index) do
  def loop(first, last, n) when n == index, {reverse(first), last}
  def loop(first, last, n) when last == nil, {reverse(first), last}
  def loop(first, last, n) loop(@last : first, ^last, n + 1)
  loop(nil, list, 0)
end

def tail(list) ^list

def take(list, n) do
  def loop(list, n, result) when list == nil, reverse(result)
  def loop(list, n, result) when n == 0, reverse(result)
  def loop(list, n, result) loop(^list, n - 1, @list : result)
  loop(list, n, nil)
end

; def unzip(list)

def with_index(list)
  zip(iota(#list), list)

def zip(a, b) do
  def build_zip(a, b, zipped)
    if a and b,
      build_zip(^a, ^b, {@a, @b} : zipped)
    else
      reverse(zipped)

  build_zip(a, b, nil)
end
