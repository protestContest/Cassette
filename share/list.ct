module List
import Map
import Math

def from(value) do
  def from-tuple(index, acc) do
    if index == #value do
      reverse(acc)
    else
      from-tuple(index + 1, value(index) | acc)
    end
  end

  def from-map(map) do
    zip(map-keys(map), map-values(map))
  end

  cond do
    pair?(value) -> value
    tuple?(value) -> from-tuple(0, nil)
    binary?(value) -> from-tuple(0, nil)
    map?(value) -> from-map(value)
    true -> :error
  end
end

def repeat(item, n)
  if n > 0 do
    item | repeat(item, n - 1)
  else
    nil
  end

def range(min, max) do
  def loop(n, list) do
    if n < min do
      list
    else
      loop(n - 1, n | list)
    end
  end

  loop(max - 1, nil)
end

def reduce(fn, acc, list)
  cond do
    list == nil -> acc
    true -> reduce(fn, fn(head(list), acc), tail(list))
  end

def reverse(list) reduce(\item, reversed -> (item | reversed), nil, list)

def map(fn, list) do
  let result = reduce(\item, acc -> (fn(item) | acc), nil, list)
  reverse(result)
end

def filter(fn, list) do
  def loop(item, acc) do
    if fn(item) do
      item | acc
    else
      acc
    end
  end

  reverse(reduce(loop, nil, list))
end

def reject(fn, list) do
  def loop(item, acc) do
    if not fn(item) do
      item | acc
    else
      acc
    end
  end

  reverse(reduce(loop, nil, list))
end

def flatten(list) do
  def loop(list, acc) do
    cond do
      list == nil -> acc
      pair?(head(list)) -> loop(tail(list), loop(head(list), acc))
      true -> loop(tail(list), head(list) | acc)
    end
  end

  reverse(loop(list, []))
end

def flatmap(fn, list) flatten(map(fn, list))

def intersperse(value, list) do
  def loop(list, acc) do
    cond do
      list == nil -> tail(acc)
      true -> loop(tail(list), value | head(list) | acc)
    end
  end

  reverse(loop(list, nil))
end

def any?(fn, list)
  cond do
    list == nil -> false
    fn(head(list)) -> true
    true -> any?(fn, tail(list))
  end

def all?(fn, list)
  cond do
    list == nil -> true
    not pair?(list) -> fn(list)
    not fn(head(list)) -> false
    true -> all?(fn, tail(list))
  end

def take(n, list) do
  def loop(list, n, acc)
    if list != nil and n > 0 do
      loop(tail(list), n - 1, head(list) | acc)
    else
      reverse(acc)
    end

  loop(list, n, nil)
end

def drop(n, list)
  cond do
    list == nil -> nil
    n > 0 -> drop(n - 1, tail(list))
    true -> list
  end

def index-of(item, list) do
  def loop(list, index)
    cond do
      list == nil -> nil
      head(list) == item -> index
      true -> loop(tail(list), index + 1)
    end

  loop(list, 0)
end

def find(fn, list)
  cond do
    list == nil -> nil
    fn(head(list)) -> head(list)
    true -> find(fn, tail(list))
  end

def to-map(list) do
  def loop(item, map) do
    if pair?(item) do
      Map.set(map, head(item), tail(item))
    else
      Map.set(map, item, nil)
    end
  end

  reduce(loop, {:}, list)
end

def stream(list)
  if list == nil do
    nil
  else
    head(list) | \-> stream(tail(list))
  end

def split(fn, list) do
  let results =
    reduce(\item, results -> do
      let trues = head(results),
          falses = tail(results)
      if fn(item) do
        (item | trues) | falses
      else
        trues | (item | falses)
      end
    end, nil, list)

  reverse(head(results)) | reverse(tail(results))
end

def with-index(list) do
  reverse(reduce(\item, acc -> ((item | #acc) | acc), nil, list))
end

def zip(heads, tails) do
  def loop(heads, tails, acc)
    cond do
      heads == nil -> acc
      tails == nil -> acc
      true -> loop(tail(heads), tail(tails), (head(heads) | head(tails)) | acc)
    end

  reverse(loop(heads, tails, nil))
end

def unzip(list) do
  let result =
      reduce(\item, acc -> do
        let heads = head(acc), tails = tail(acc)
        if not pair?(item) do
          acc
        else
          (head(item) | heads) | (tail(item) | tails)
        end
      end, nil, list)

  reverse(head(result)) | reverse(tail(result))
end

def random-choice(list) do
  let i = Math.rand-int(0, #list)
  list(i)
end
