module Sketch
import Window, Time

def should_quit(event)
  event.what == :keyDown and
  ((event.message & 0xFF == $q and Window.modifier?(event, :cmd)) or
   (event.message >> 8 == 0x35))

def loop_until_close(window) do
  let event = Window.next_event()
  if should_quit(event), nil
  else loop_until_close(window)
end

def draw(window, draw_frame) do
  let event = Window.next_event()
  guard not should_quit(event) else nil

  let draw_frame = draw_frame(window)
  Window.update(window)
  if draw_frame, draw(window, draw_frame)
  else nil
end

def animate(window, draw_frame, state) do
  def next_frame(time, fn) when Time.millis() < time, next_frame(time, fn)
  def next_frame(time, fn) fn()

  let now = Time.millis()
  let event = Window.next_event()
  guard not should_quit(event) else nil

  let state = draw_frame(state, window)
  Window.update(window)
  if state == :quit, nil
  else next_frame(now + 33, \ -> animate(window, draw_frame, state))
end
