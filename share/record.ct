module Record
import Value (symbol?, tuple?)
export get, put, contains?, type, keys, values, record?

def record?(rec)
  tuple?(rec) and
  #rec == 3 and
  symbol?(rec[0]) and
  tuple?(rec[1]) and
  tuple?(rec[2]) and
  #rec[1] == #rec[2]
def type(rec) record?(rec) and rec[0]
def keys(rec) rec[1]
def values(rec) rec[2]

def key_index(rec, key) do
  def loop(i, keys) when i == #keys, nil
  def loop(i, keys) when keys[i] == key, i
  def loop(i, keys) loop(i+1, keys)
  loop(0, keys(rec))
end

def get(rec, key) do
  let i = key_index(rec, key)
  guard i != nil else nil
  values(rec)[i]
end

def put(rec, key, value) do
  let i = key_index(rec, key)
  guard i != nil else rec
  let values = values(rec),
      values = values[0,i] <> values[i+1,#values]
  {type(rec), keys(rec), values}
end

def contains?(rec, key) key_index(rec, key) != nil
