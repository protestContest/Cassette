module Range
import List

def Range(first, last) first : last
def first(range) @range
def last(range) @range

def reduce(range, acc, fn) do
  def loop(i, acc) when i >= last(range), acc
  def loop(i, acc) loop(i+1, fn(i, acc))
  loop(0, acc)
end

def map(range, fn) do
  List.reverse(reduce(range, nil, \i, list -> fn(i) : list))
end

def for(first, last, fn) map(Range(first, last), fn)

def disjoint?(range1, range2)
  range1.first >= range2.last or range1.last <= range2.first

def size(range) last(range) - first(range)

def split(range, index) when index < first(range), range
def split(range, index) when index >= last(range), range
def split(range, index) {Range(first(range), index), Range(index, last(range))}
