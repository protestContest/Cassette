module Range
import List
export Range, reduce, map, for

record Range(first, last)

def reduce(range, acc, fn) do
  def loop(i, acc) when i >= range.last, acc
  def loop(i, acc) loop(i+1, fn(i, acc))
  loop(0, acc)
end

def map(range, fn) do
  List.reverse(reduce(range, nil, \i, list -> fn(i) : list))
end

def for(first, last, fn) map(Range(first, last), fn)

def disjoint?(range1, range2)
  range1.first >= range2.last or range1.last <= range2.first

def size(range) range.last - range.first

def split(range, index) when index < range.first, range
def split(range, index) when index >= range.last, range
def split(range, index) {Range(range.first, index), Range(index, range.last)}
