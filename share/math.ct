module Math

def max_int() Host.max_int()
def min_int() Host.min_int()
def popcount(n) Host.popcount(n)

def random() Host.random()
def seed(s) Host.seed(s)

def random_between(min, max) when min == max, min
def random_between(min, max) when min > max, random_between(max, min)
def random_between(min, max) do
  def loop(r, limit) when r < 0, loop(random(), limit)
  def loop(r, limit) when r >= limit, loop(random(), limit)
  def loop(r, limit) r

  let
    range = max - min,
    num_buckets = Host.max_int() / range,
    limit = num_buckets * range,
    r = loop(random(), limit)
  min + r / num_buckets
end

def min(a,b) when a < b, a
def min(a,b) b
def max(a, b) when a > b, a
def max(a, b) b

def clamp(n, low, high) when n < low, low
def clamp(n, low, high) when n > high, high
def clamp(n, low, high) n

def map(t, a0, a1, b0, b1)
  (t - a0) * (b1 - b0) / (a1 - a0) + b0

def align(n, m) when n == 0, 0
def align(n, m)
  ((n - 1) / m + 1) * m

def hash(value) Host.hash(value)
