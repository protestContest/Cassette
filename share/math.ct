module Math
import System

let Pi = 3.141593,
    half_pi = Pi / 2,
    E = 2.718282

def abs(n) if n < 0 do -n else n end
def ceil(n) if n >= 0 do Type.trunc(n) + 1 else Type.trunc(n) end
def clamp(n, low, high) min(max(n, low), high)

def exp(n) expt(E, n)

def expt(base, power) do
  def loop(n, product) do
    if n == power do
      product
    else
      loop(n + 1, base * product)
    end
  end

  if power < 0 do
    1 / expt(base, -power)
  else
    loop 0 1
  end
end

def floor(n) if n >= 0 do Type.trunc(n) else Type.trunc(n) - 1 end
def max(a, b) if a > b do a else b end

def midpoint(p1, p2) do
  {(p1.0 + p2.0) / 2, (p1.1 + p2.1) / 2}
end

def min(a, b) if a < b do a else b end
def rand-int(min, max) Type.trunc(System.random() * (max - min)) + min
def random System.random()
def round(n) floor(n + 0.5)

def sqrt(n) do
  def loop(guess) do
    if abs(n - guess * guess) < 0.000001 do
      guess
    else
      let guess = (guess + n / guess) / 2
      loop(guess)
    end
  end

  loop(1.0)
end

let sin_table = {
  0.000000, 0.024541, 0.049067, 0.073564, 0.098017, 0.122410, 0.146730, 0.170961,
  0.195090, 0.219101, 0.242980, 0.266712, 0.290284, 0.313681, 0.336889, 0.359895,
  0.382683, 0.405241, 0.427555, 0.449611, 0.471396, 0.492898, 0.514102, 0.534997,
  0.555570, 0.575808, 0.595699, 0.615231, 0.634393, 0.653172, 0.671558, 0.689540,
  0.707106, 0.724247, 0.740951, 0.757208, 0.773010, 0.788346, 0.803207, 0.817584,
  0.831469, 0.844853, 0.857728, 0.870086, 0.881921, 0.893224, 0.903989, 0.914209,
  0.923879, 0.932992, 0.941544, 0.949528, 0.956940, 0.963776, 0.970031, 0.975702,
  0.980785, 0.985277, 0.989176, 0.992479, 0.995184, 0.997290, 0.998795, 0.999698,
  1.000000, 0.999698, 0.998795, 0.997290, 0.995184, 0.992479, 0.989176, 0.985277,
  0.980785, 0.975702, 0.970031, 0.963776, 0.956940, 0.949528, 0.941544, 0.932992,
  0.923879, 0.914209, 0.903989, 0.893224, 0.881921, 0.870086, 0.857728, 0.844853,
  0.831469, 0.817584, 0.803207, 0.788346, 0.773010, 0.757208, 0.740951, 0.724247,
  0.707106, 0.689540, 0.671558, 0.653172, 0.634393, 0.615231, 0.595699, 0.575808,
  0.555570, 0.534997, 0.514102, 0.492898, 0.471396, 0.449611, 0.427555, 0.405241,
  0.382683, 0.359895, 0.336889, 0.313681, 0.290284, 0.266712, 0.242980, 0.219101,
  0.195090, 0.170961, 0.146730, 0.122410, 0.098017, 0.073564, 0.049067, 0.024541,
  0.000000, -0.02454, -0.04906, -0.07356, -0.09801, -0.12241, -0.14673, -0.17096,
  -0.19509, -0.21910, -0.24298, -0.26671, -0.29028, -0.31368, -0.33688, -0.35989,
  -0.38268, -0.40524, -0.42755, -0.44961, -0.47139, -0.49289, -0.51410, -0.53499,
  -0.55557, -0.57580, -0.59569, -0.61523, -0.63439, -0.65317, -0.67155, -0.68954,
  -0.70710, -0.72424, -0.74095, -0.75720, -0.77301, -0.78834, -0.80320, -0.81758,
  -0.83146, -0.84485, -0.85772, -0.87008, -0.88192, -0.89322, -0.90398, -0.91420,
  -0.92387, -0.93299, -0.94154, -0.94952, -0.95694, -0.96377, -0.97003, -0.97570,
  -0.98078, -0.98527, -0.98917, -0.99247, -0.99518, -0.99729, -0.99879, -0.99969,
  -1.00000, -0.99969, -0.99879, -0.99729, -0.99518, -0.99247, -0.98917, -0.98527,
  -0.98078, -0.97570, -0.97003, -0.96377, -0.95694, -0.94952, -0.94154, -0.93299,
  -0.92387, -0.91420, -0.90398, -0.89322, -0.88192, -0.87008, -0.85772, -0.84485,
  -0.83146, -0.81758, -0.80320, -0.78834, -0.77301, -0.75720, -0.74095, -0.72424,
  -0.70710, -0.68954, -0.67155, -0.65317, -0.63439, -0.61523, -0.59569, -0.57580,
  -0.55557, -0.53499, -0.51410, -0.49289, -0.47139, -0.44961, -0.42755, -0.40524,
  -0.38268, -0.35989, -0.33688, -0.31368, -0.29028, -0.26671, -0.24298, -0.21910,
  -0.19509, -0.17096, -0.14673, -0.12241, -0.09801, -0.07356, -0.04906, -0.02454
};

def sin(x) do
  let si = Type.trunc(x * 0.5 * #sin_table / Pi),
      d = x - si * 2 * Pi / #sin_table,
      ci = Type.trunc(si + #sin_table / 4),
      si = si & #sin_table - 1,
      ci = ci & #sin_table - 1
  sin_table(si) + (sin_table(ci) - 0.5 * sin_table(si) * d) * d
end

def cos(x) sin(x + half_pi)
def tan(x) sin(x) / cos(x)
