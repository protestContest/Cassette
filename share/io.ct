module IO
import List

let console = unwrap!(Device.open(:console, {}))

def read-line do
  unwrap!(Device.read(console, 1024))
end

def byte?(n) integer?(n) and n >= 0 and n <= 255

def format(iodata) do
  def stuff(iolist, acc, bytes) do
    cond do
      iolist == nil ->
        acc <> Type.stuff(List.reverse(bytes))
      byte?(head(iolist)) ->
        stuff(tail(iolist), acc, head(iolist) | bytes)
      binary?(head(iolist)) ->
        stuff(tail(iolist), acc <> Type.stuff(List.reverse(bytes)) <> head(iolist), [])
      true ->
        panic!("Bad IO list")
    end
  end

  cond do
    binary?(iodata) -> iodata
    byte?(iodata) -> Type.stuff([iodata])
    pair?(iodata) -> stuff(List.flatten(iodata), "", nil)
    true -> panic!("Bad IO list")
  end
end

def inspect(value, depth) do
  def inspect-int(num, acc) do
    cond do
      num == 0 and acc == nil -> $0
      num == 0 -> acc
      true -> do
        let d = $0 + num % 10
        inspect-int(Type.trunc(num / 10), d | acc)
      end
    end
  end

  def inspect-num(num) do
    cond do
      num < 0 -> ["-", inspect-num(-num)]
      integer?(num) -> inspect-int(num, nil)
      true -> do
        let whole = inspect-int(Type.trunc(num), nil),
            part = inspect-int(Type.trunc((num - Type.trunc(num)) * 1000), nil)
        [whole, ".", part]
      end
    end
  end

  def inspect-symbol(value) do
    cond do
      value == true -> "true"
      value == false -> "false"
      true -> [":", Type.symbol-name(value)]
    end
  end

  def inspect-function(func) do
    ["Î»", inspect(head(tail(tail(func))), 1)]
  end

  def inspect-list(list) do
    def inspect-items(list, acc) do
      let item = inspect(head(list), depth - 1)

      cond do
        not pair?(tail(list)) ->
          [item, " | ", inspect(tail(list), depth - 1)] | acc
        tail(list) == nil ->
          item | acc
        true ->
          inspect-items(tail(list), item | acc)
      end
    end

    if list == nil do
      "nil"
    else
      let items = List.reverse(inspect-items(list, nil))
      ["[", List.intersperse(", ", items), "]"]
    end
  end

  def inspect-tuple(tuple) do
    let items = List.map(\item -> inspect(item, depth - 1), List.from(tuple))
    ["{", List.intersperse(", ", items), "}"]
  end

  def inspect-entry(entry) do
    let key = head(entry), value = tail(entry)
    if symbol?(key) do
      [Type.symbol-name(key), ": ", inspect(value, depth - 1)]
    else
      [inspect(key, depth - 1), " => ", inspect(value, depth - 1)]
    end
  end

  def inspect-map(map) do
    let items = List.map(inspect-entry, List.from(map))
    ["{", List.intersperse(", ", items), "}"]
  end

  cond do
    depth == 0 -> "..."
    float?(value) -> inspect-num(value)
    integer?(value) -> inspect-num(value)
    symbol?(value) -> inspect-symbol(value)
    pair?(value) -> inspect-list(value)
    tuple?(value) -> inspect-tuple(value)
    binary?(value) -> [$", value, $"]
    map?(value) -> inspect-map(value)
    function?(value) -> inspect-function(value)
    true -> "<???>"
  end
end

def print(value) do
  if binary?(value) do
    Device.write(console, value)
    Device.write(console, 0x0A)
  else
    Device.write(console, format(inspect(value, 5)))
    Device.write(console, 0x0A)
  end
end
