module IO
export open, close, read, read_chunk, write, write_chunk, seek, print, inspect, read_file, write_file,
stdin, stdout, stderr

def stdin() 0
def stdout() 1
def stderr() 2

def open(path, modes) do
  def parse_modes(modes)
    let read = List.contains?(modes, :read)
        write = List.contains?(modes, :write)
        append = List.contains?(modes, :append)
        excl = List.contains?(modes, :exclusive)
        flags =
          if
            read and (write or append or excl), 2 ;read-write
            write or append or excl, 1 ;write
            else 0 ;read
        flags = if write or append or excl, flags | 512 else flags ; create
        flags = if append, flags | 8 else flags ; append
        flags = if write and not read, flags | 1024 else flags ; trunc
        flags = if excl, flags | 2048 else flags ; excl
      in
        flags

  Host.open(path, parse_modes(modes))
end

; opts should be of the form "8N1" or {8, :none, 1}
; data bits can be between 5-8
; parity can be :even ("E"), :odd, ("O"), or :none ("N")
; stop bits should be 1 or 2
def open_serial(port, speed, opts) do
  def parse_opts(opts)
    if typeof(opts) == :binary,
      let parity =
        if
          opts[1] == $E, :even
          opts[1] == $O, :odd
          else :none
      in
        parse_opts({opts[0] - $5, parity, opts[1] - $2})
    else
      let flags = 0x100 * (opts[0] - $5)
          flags =
            if
              opts[1] == :even, flags | 0x1000
              opts[1] == :odd, flags | 0x1000 | 0x2000
              else flags
          flags = if opts[2] == 2, flags | 0x400 else flags
      in flags

  Host.open_serial(speed, parse_opts(opts))
end

def close(file) Host.close(file)

def read_chunk(file, size) Host.read(file, size)

def read(file) do
  def loop(received)
    let data = read_chunk(file, 1024)
    in if
      error?(data), data
      #data == 0, format(List.reverse(received))
      else loop(data : received)

  loop([])
end

def write_chunk(file, data) Host.write(file, data)

def write(file, data) do
  def loop(data)
    let sent = write_chunk(file, data)
    in if
      error?(sent), sent
      sent == #data, :ok
      else loop(data[sent, #data])

  loop(data)
end

def print(str) write(stdout(), format([str, "\n"]))

def inspect(val) do
  print(Value.inspect(val))
  val
end

def seek(file, offset, whence)
  let whence =
    if
      whence == :start, 0
      whence == :cur, 1
      whence == :end, 2
      else 0
  in Host.seek(file, offset, whence)

def read_file(path)
  let
    file = open(path, [:read]) except error?(file), file
    size = seek(file, 0, :end)
    _ = seek(file, 0, :start)
    contents = read(file)
  in do
    close(file)
    contents
  end

def write_file(path, data)
  let
    file = open(path, [:write]) except not file, 0
    written = write(file, data)
  in do
    close(file)
    written
  end
